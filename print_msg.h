/****************************************************************************
 *
 *  ARICENT -
 * 
 *  Copyright (c) 2011 Aricent.
 *
 ****************************************************************************
 * File Details
 * ------------
 *  $Id: logging.h,v  2011/01/27 06:00:00 gur19170 Exp $
 ****************************************************************************
 *
 *  File Description :
 *  This is the header file of logging framework includes
 *  data structure used for logging
 *
 ****************************************************************************
 *
 * Revision Details
 * ----------------
 *
 * $Log: logging.h,v $
 * Revision 1.1.1 2012/08/3 012:06:27  gur31292
 * Changes related to DCI Format3A
 *
 * Initial version
 *
 ****************************************************************************/
#ifndef LOGGING_H 
#define LOGGING_H

#include <limits.h>
#include "lteTypes.h"
#include <sys/time.h>
#include <time.h>

/****************************************************************************
 * Project Includes
 ****************************************************************************/
/* ####################### */
/****************************************************************************
 * Exported Includes
 ****************************************************************************/



/****************************************************************************
 * Exported Definitions
 ****************************************************************************/
#define FILE_HEADER_STRING        "*** WARNING - DO NOT MODIFY FILE CONTENTS ***" 
#define TRACE_START_STRING        "*** TRACING STARTED ***" 

#define TRACE_SECTION_SIZE        4
#define WRITE_OFFSET_SIZE         4
#define ROTATED_FLAG_SIZE         1 
/*
 * File Header Size = 9 Bytes  (Trace Section Size 4 Byte, write offset 4 Byte,
 *                              isRotated Flag 1 Byte) + 1(for null character)
 */
/*#define LOG_FILE_HEADER_SIZE     TRACE_SECTION_SIZE + WRITE_OFFSET_SIZE + \
                                 ROTATED_FLAG_SIZE + strlen(FILE_HEADER_STRING) + 1*/

#define MAX_INIT_BUFF_SIZE    32 

#define MAX_LOG_AREAS_PER_STACK     999
/*#define MAX_LOG_LEVEL               32 */
#define LTE_MAX_FILE_NAME_SIZE        255
#define MAX_LOG_MEMORY_SIZE         52428800 /*5MB*/
#define MAX_THREAD_NAME_SIZE        255
#define MAX_STACKS                  10

#define MAX_LOG_LENGTH                 565
#define MAX_FAPI_LOG_LENGTH            1565
#define MAX_NEW_ERROR_MSG_SIZE          80
#ifdef DL_UL_SPLIT
#define MAX_THREADS                 9
#ifndef NUM_OF_EXEC_FLOWS
/*SPR 16855 +-*/
#define NUM_OF_EXEC_FLOWS             3
/*SPR 16855 +-*/
#endif
#elif DL_UL_SPLIT_TDD
#define NUM_OF_MAC_EXEC_FLOWS         2
#define NUM_OF_EXEC_FLOWS             NUM_OF_MAC_EXEC_FLOWS+1
#define MAX_THREADS                 9
#elif DL_DATA_SEPARATION
/*CID 64269 <Out-of-bounds access (OVERRUN)> Warning Fix => MAX_THREADS increased for case of DL_DATA_SEPARATION */
#define MAX_THREADS                 20//7
#else
#ifdef LTE_EMBMS_SUPPORTED
#define MAX_THREADS                 6
#else
#define MAX_THREADS                 5
#endif
#endif

#define DEFAULT_INT_VALUE 0 
#define DEFAULT_FLOAT_VALUE 0.0 
#define FUNCTION_NAME __func__
#define FILE_NAME __FILE__
#define LINE_NUMBER __LINE__
#define FNAME "FUNCTION" 
#define EVENT "EVENT" 
#define FILENAME "FILE"
#define NEW_BIN_LOG 0XABCDABCD

#define PERRORMSG(errorMsg)\
{\
    Char8  eMsg[MAX_NEW_ERROR_MSG_SIZE];\
    /* +COVERITY 10240 */\
    snprintf(eMsg,MAX_NEW_ERROR_MSG_SIZE,"[%s] %s !!",__func__,errorMsg);\
    /* -COVERITY 10240 */\
    perror(eMsg);\
}

/*
 * Defines the name of shared memory log regions that application thread 
 * shall use to register with logging library via logger_init function
 */
#ifdef TARGET_ENB
#define LTE_L2_LOG_REGION_ONE_NAME     "MAC_RLC_REGION_TARGET"
#define LTE_L2_LOG_REGION_TWO_NAME     "RLC_PDCP_REGION_TARGET"
#define LTE_L2_LOG_REGION_THREE_NAME   "CIPHERING_REGION_TARGET"

/*SPR 16855 +-*/
#ifndef DL_UL_SPLIT
#define LTE_L2_LOG_REGION_FOUR_NAME    "MAC_LP_THD_REGION_TARGET"
#endif
#if (defined(DL_UL_SPLIT) || defined(DL_UL_SPLIT_TDD))
#define LTE_L2_LOG_REGION_FLOW         "MAC_RLC_REGION_TARGET_FLOW_"
#endif
#else
#define LTE_L2_LOG_REGION_ONE_NAME     "MAC_RLC_REGION"
#define LTE_L2_LOG_REGION_TWO_NAME     "RLC_PDCP_REGION"
#define LTE_L2_LOG_REGION_THREE_NAME   "CIPHERING_REGION"
/*SPR 16855 +-*/
#ifndef DL_UL_SPLIT
#define LTE_L2_LOG_REGION_FOUR_NAME    "MAC_LP_THD_REGION"
#endif
#if (defined(DL_UL_SPLIT) || defined(DL_UL_SPLIT_TDD))
#define LTE_L2_LOG_REGION_FLOW         "MAC_RLC_REGION_FLOW_"
#endif
#ifdef DL_DATA_SEPARATION
#define LTE_L2_LOG_ENCODER_REGION         "MAC_RLC_ENCODER_REGION"
#endif
#endif
/* SPR 5178 changes starts here */
/*SPR21717 Changes Start */
#define LTE_L2_LOG_REGION_FIVE_NAME    "GTPU_REGION"
/*SPR21717 Changes End */
#define LTE_L2_LOG_REGION_PDCP_NAME   "PDCP_REGION"
/*SPR 21727 Changes Start*/
#if defined RLC_PDCP_IPC_INTF
/*SPR 21727 Changes End*/
#define LTE_L2_LOG_REGION_SEVEN_NAME     "RLC_IPC_REGION"
/* SPR 5178 changes ends here */
#endif
#ifdef LTE_EMBMS_SUPPORTED
#define LTE_L2_SYNC_REGION_NAME         "SYNC_REGION"
#endif
/*
 * Defines the id of shared memory log regions that application thread 
 * shall use to register with logging library via logger_init function
 */
enum {
    LTE_L2_LOG_REGION_ONE_ID = 0,
    LTE_L2_LOG_REGION_TWO_ID,
    LTE_L2_LOG_REGION_THREE_ID,
    /* SPR 11453 Changes Start */
    LTE_L2_LOG_REGION_RLC_PDCP_ID
    /* SPR 11453 Changes End */
/*SPR 16855 +-*/
/* SPR 21930 Fix +- */
    ,LTE_L2_LOG_REGION_FOUR_ID
/* SPR 21930 Fix +- */
/* SPR 5178 changes starts here */
/*SPR 21773 Start :CID 64269*/
/*SPR 21773 End :CID 64269*/
/*SPR 21727 Changes Start*/
#if  RLC_PDCP_IPC_INTF
/*SPR 21727 Changes End*/
    ,LTE_L2_LOG_REGION_SEVEN_ID
#endif
/* SPR 5178 changes ends here */
#ifdef DL_DATA_SEPARATION
    ,LTE_L2_LOG_ENCODER_REGION_ID  
#endif
    /* + SPR 19808 */
#ifdef PDCP_ASYNC_INTERFACE
    , LTE_L2_LOG_PDCP_ASYNC_ID
#endif
    /* - SPR 19808 */
#ifdef LTE_EMBMS_SUPPORTED
        ,LTE_L2_SYNC_REGION_ID
#endif
	,LTE_L2_PDCP_MASTER_REGION_ID_BASE,
	LTE_L2_PDCP_WORKER_REGION_ID_BASE,
	LTE_L2_PDCP_ACCUMULATOR_REGION_ID_BASE = (LTE_L2_PDCP_WORKER_REGION_ID_BASE +5),
	
#if (defined(DL_UL_SPLIT) || defined(DL_UL_SPLIT_TDD))
    ,LTE_L2_LOG_REGION_MAX
#endif
};


/*
 * Defines log id that the application shall use while invoking LOG_MSG.
 * Corresponding log string needs to be updated logArray.c
 */
enum {
    INVALID_LOG_ID=0x0,
    L2_GET_MEMFROMPOOL_FAIL_ID=0x1,
    L2_MSG_SEGNEXT_FAIL_ID,
    L2_PUSH_QUEUE_NODE_FAIL_ID,
    L2_MSG_GET_FAIL_ID,
    L2_CREATE_SOCKET_FAIL_ID,
    /*SPR 2030 fix Start*/
    L2_ACCEPT_SOCKET_FAIL_ID,
    /*SPR 2030 fix End*/
    /*Coverity 95472_95476 Fix Start*/
    L2_CLOSE_SOCKET_FAIL_ID,
    /*Coverity 95472_95476 Fix End*/
    L2_STR_NET_CONV_FAIL_ID,
    L2_BIND_SOCKET_FAIL_ID,
    L2_SOCKET_SENDTO_FAIL_ID,
    L2_SOCKET_RECVFROM_FAIL_ID,
    L2_SOCKET_RECVFROM_SUCCESS_ID, /*added for logInfo*/
    L2_GET_HOSTBYNAME_FAIL_ID,      /*12*/
    L2_LOG_LOST,
    L2_CRASH_ID,
    L2_BACKTRACE_ID,
    L2_MEM_POOL_HIGH_WATERMARK,
    L2_MSG_POOL_HIGH_WATERMARK,
    MAC_DBG_LOG_ID,
    MAC_PHY_SF_IND_ID,
    MAC_BCH_CTL_TX_ID,
    MAC_DCI0_TX_ID,                 /*20*/
    MAC_DCI_TX_ID,
    MAC_COMM_TX_ID,                 /*22*/
    MAC_HI_TX_ID,
    MAC_BCH_DATA_TX_ID,
    MAC_DATA_TX_ID,
    MAC_COMM_DATA_TX_ID,
    MAC_HI_RX_RNTIERR_ID,
    MAC_HI_RX_UEDELETE_ID,
    MAC_HI_TCRNTI_RX_ID,
    MAC_HI_CRNTI_RX_ID,              /*30*/
    MAC_HI_RX_INS_ID,  
    MAC_HARQ_IND_RECV_ID,
    MAC_CRC_RX_RNTIERR_ID,       
    MAC_CRC_RX_UEDELETE_ID,
    MAC_CRC_CRNTI_RX_ID,
    MAC_CRC_RX_UECONTEXT_NULL_ID,
    MAC_CRC_RX_CRCFLAG_INS_ID,
    MAC_ULSCH_RX_RNTIERR_ID,
    MAC_ULSCH_RX_UEDELETE_ID,
    MAC_ULSCH_RX_DATA_ID,
    MAC_ULSCH_FREQ_SEL_SCH_ID,       /*40*/
    /* SPR 1600 changes start */
    MAC_ULCONFIG_ULSCH_ID,              
    /* SPR 1600 changes end */
    MAC_DEMUX_LC_ID,                 /*42*/
    MAC_DEMUX_DATA_LC_ID,
    MAC_DEMUX_DATA_INVALID_LC_ID,
    MAC_DEMUX_DATA_INVALID_LCG_ID,
    MAC_DEMUX_QUEUE_INS_ID,
    MAC_RACH_IND_RCVD_ID,
    MAC_CONTENTION_ACK_RCVD_ID,
    MAC_SR_RNTIERR_ID,
    MAC_SR_UEDELETE_ID,
    MAC_SR_RCV_IND_ID,
    MAC_SR_DROP_IND_ID,
    MAC_CQI_RNTIERR_ID,
    MAC_CQI_UEDELETE_ID,
    MAC_CQI_DECODE_ID,
    MAC_SRS_UE_RECV_ID,              /*57*/
    MAC_SRS_RB_RECV_ID,
    MAC_SRS_RNTIERR_ID,
    MAC_SRS_UEDELETE_ID,
    MAC_PHY_INIT_INV_MSG_LEN_ID,
    MAC_PHY_INV_MSG_LEN_ID,
    MAC_PHY_INV_MSG_ID,
    MAC_PHY_INV_SFNSF_ID,
    MAC_PHY_ERR_SFNSF_MSG_ID,
    MAC_PHY_ERR_HI_MSG_ID,
    MAC_PHY_ERR_MSG_TX_ID,
    MAC_PHY_ERR_SUBFRAME_ID,
    /*TDD Tick overshoot changes start*/
    MAC_PHY_ERR_BCH_MISSING_ID,
    /*TDD Tick overshoot changes end*/
    MAC_PHY_TICK_MISS,               /*70*/
    MAC_ACK_ZERO_BAND_ULHARQ_ID,
    MAC_ALLOCATE_ULHARQ_UEINFO_ID,
    MAC_ULHARQ_ALLOC_FAIL_RI_NONZERO_ID,
    MAC_ACK_FREE_ULHARQ_ID,
    MAC_INVALID_CRC_FREE_ULHARQ_ID,
    MAC_NACK_DELAY_FREE_ULHARQ_ID,
    MAC_NACK_CCE_ALLOC_SUCC_ID,
    MAC_NACK_CCE_ALLOC_FAIL_ID,
    MAC_NACK_DROP_UEDELETE_ID,
    MAC_INVALID_NACKNODE_ULHARQ_ID,
    MAC_NACK_RETX_COMP_FREE_ULHARQ_ID,
    MAC_NACK_RES_ALLOC_FAIL_ULHARQ_ID,    /*83*/
    /* ULA_CHG */
    MAC_NACK_RES_ULHARQ_ID,
    /* ULA_CHG */
    MAC_NACK_RES_ZERO_ULHARQ_ID,
    MAC_UPDATE_DCI_INFO_ONE_ID,
    MAC_UPDATE_DCI_INFO_TWO_ID,
    MAC_ALLOCATE_ULHARQ_ID,
    MAC_UPDATE_ULHARQ_ID,
    MAC_ADAPTIVE_RES_ALLOC_FAIL_ID,       /*90*/
    MAC_NON_ADAPTIVE_RES_ALLOC_FAIL_ID,
    MAC_NON_ADAPTIVE_CCE_ALLOC_ID,
    MAC_NACK_ADV_ALLOC_SUCC_ID,
    MAC_NACK_ADV_ALLOC_FAIL_ID,
    MAC_DELAY_ACK_FREE_ULHARQ_ID,
    MAC_UEINDEX_DELETE_ULHARQ_ID,
    MAC_INVALID_ACKNODE_ULHARQ_ID,
    MAC_INVALID_HID_ULHARQ_ID,
    MAC_TIMER_START_ULHARQ_ID,
    MAC_HARQ_PROC_FREE_ULHARQ_ID,         /*100*/
    MAC_TIMER_NODE_BUSY_ULHARQ_ID,
    MAC_TIMER_CNT_ZERO_ULHARQ_ID,
    MAC_TIMER_CNT_INVALID_ULHARQ_ID,          
    MAC_TIMER_STOP_ULHARQ_ID,
    MAC_TIMER_NODE_FREE_ULHARQ_ID,
    MAC_EXPIRY_CNT_ZERO_ULHARQ_ID,
    MAC_EXPIRY_SFMISMATCH_ULHARQ_ID,     
    MAC_EXPIRY_NACK_INS_ULHARQ_ID,          /*108*/
    MAC_EXPIRY_HARQ_FREE_ULHARQ_ID,
    MAC_TICKDIFF_TIMER_START_ULHARQ_ID,
    MAC_TICKDIFF_NODE_BUSY_ULHARQ_ID,
    MAC_TICKDIFF_EXPIRY_NACK_INS_ULHARQ_ID,
    MAC_EXPIRY_STOP_ULHARQ_ID,
    MAC_EXPIRY_UEDELETE_ULHARQ_ID,
    MAC_EXPIRY_NODE_FREE_ULHARQ_ID,
    MAC_RB_UNAVAIL_RAR_ID,
    MAC_RARNTI_SCH_ID,
    MAC_UPDATE_RACH_CONFIG_FAIL_ID,
    MAC_RAR_RB_TBZIZE_DCI1A_FAIL_ID,
    MAC_RAR_RB_ALLOC_SUCC_ID,          /*120*/
    MAC_RAR_RB_ALLOC_MSG3_ID,
    MAC_RAR_RB_ALLOC_FAIL_ID,
    MAC_RAR_TEMP_CONTEXT_FAIL_ID,
    MAC_NEG_RAR_TTI_EXPIRED_ID,
    MAC_NEG_LESS_ULRB_ID,              /*125*/
    MAC_NEG_RAR_RB_ALLOC_SUCC_ID,
    MAC_NEG_RAR_RB_ALLOC_FAIL_ID,
    MAC_NEG_RAR_TCRNTI_FAIL_ID,
    MAC_NEG_RAR_TIMER_NULL_ID,
    MAC_RAR_DCI_ALLOC_SUCC_ID,
    MAC_RAR_DCI_ALLOC_FAIL_ID,
    MAC_FREE_RAR_ID,
    MAC_FREE_RAR_MSG3_ID,
    MAC_RAR_AGGLEVEL_AVAILRB_LESS_ID,    /*134*/
    /* SPR 1600 changes start */
    MAC_RAR_TCRNTI_NOT_FOUND_ID,
    MAC_MSG3_ULSCH_ID,
    /* SPR 1600 changes end */
    MAC_MSG3_ULSCH_CONTAINER_ID,
    MAC_TCRNTI_START_TIMER_ID,
    MAC_TCRNTI_STOP_TIMER_ID,
    MAC_TCRNTI_TIMER_EXPIRY_ID,         /*140*/
    MAC_TCRNTI_DELETE_ID,
    MAC_TCRNTI_RNTIINFO_NULL_ID,
    MAC_CONTENT_RES_START_TIMER_ID,
    MAC_CONTENT_RES_TIMER_EXPIRY_ID,
    MAC_CONTENT_RES_TCRNTI_DELETE_ID,
    OAM_RRC_INVALID_MSG_LEN_ID,
    OAM_MAC_PARSE_MSG_ID,
    OAM_RRC_MAC_INVALID_SRC_ID,
    OAM_MAC_STAT_INFO_ID,
    OAM_INVALID_LOGLEVEL_ID,
    OAM_INVALID_ENABLE_LOG_FLAG_ID,      /*151*/
    OAM_INVALID_DLSCHSTAT_FLAG_ID,
    OAM_MAC_INVALID_MSG_ID,
    MAC_RES_MSG_ID,
    MAC_OAM_RES_MSG_ID,
    MAC_RRC_CCCH_MSG_IND,
    RRC_MAC_MSG_ID,
    RRC_MAC_CELL_CONFIG_ID,          /*158*/
    RRC_MAC_INCORRECT_STATE_ID,
    MAC_RRC_PHY_CELL_CONFIG_RES_ID,
    MAC_PHY_CREATE_UE_RES_ID,
    MAC_PHY_RECONFIG_UE_RES_ID,
    MAC_PHY_UE_DEL_ID,
    RRC_CREATE_UE_ENTITY_ID,
    RRC_UE_CONREJ_MSG_ID,
    RRC_UE_CONREJ_INVALID_LEN_ID,
    RRC_PCCH_INVALID_LEN_ID,
    RRC_CCCH_SFN_ERR_ID,
    RRC_CCCH_LEN_ID,
    RRC_BCCH_INVALID_LEN_ID,
    RRC_MAC_PARSE_MSG_ID,            /*170*/
    RRC_MAC_INVALID_MSG_ID,
    RRC_MAC_LC_INFO,
    /* FREQ_SELECTIVE CHG */
    MAC_PARSE_CELL_CONFIGURE_ID,
    /* FREQ_SELECTIVE CHG */
    MAC_CELL_CONFIGURE_FAIL,
    /*SPR_8630_CHANGES_START*/
    MAC_CELL_RECONFIGURE_SUCCESS,
    /*SPR_8630_CHANGES_END*/
    MAC_CELL_RECONFIGURE_FAIL,
    MAC_UE_CREATE_CNF,
    MAC_UE_CREATE_FAIL_ID,
    MAC_UE_RECONFIGURE_CNF,
    MAC_UE_RECONFIGURE_FAIL,
    MAC_UE_POWER_HEADROOM_IND,
    MAC_UE_LC_ERR_RESPONSE,         /*182*/
    RRC_UE_DRX_MSG_ID,
    RRC_DEL_UE_MSG_ID,
    MAC_SENDTO_INVALID_MSG_ID,
    MAC_DELETE_UE_CNF,
    MAC_CELL_CONFIG_CNF,
    MAC_ERR_SFN_IND,
    MAC_CELL_RECONFIG_CNF,
    MAC_SYSFRAME_CNF,
    MAC_SENDMSGTO_INVALID_MSG_ID,
    MAC_UL_CSI_PUT_SRS_SINR_IN_QUEUE_ID,      /*192*/ 
    MAC_UL_CSI_PUT_ULSCH_SINR_IN_QUEUE_ID,     
    MAC_UL_CSI_PROCESS_SINR_REPORT_ID,         
    MAC_UL_CSI_PROCESS_SRS_SINR_ID,            
    MAC_UL_CSI_PROCESS_ULSCH_SINR_ID,          
    MAC_UL_CSI_UPDATE_MCS_TO_PRB_MAP_ID,       
    MAC_UL_CSI_UPDATE_UE_UL_BLER_ID,           
    MAC_UL_CSI_INIT_CSI_MANAGER_ID,            
    MAC_RRC_INF_UE_UL_CSI_INIT_INFO_ID,         
    MAC_RRC_INF_MCS_TO_PRB_MAP_FREE_ID,        
    MAC_L1_INF_SINR_QUEUE_FULL_ID,     /*202*/          
    MAC_UL_STRATEGY_ERROR_ID,
    /* +- SPR 17779 */
    MAC_UL_STRATEGY_ERROR_ID_1,
    MAC_UL_MODIFY_UE_ID,
    MAC_UL_STRATEGY_TX_NODE_ID,                
    MAC_FUNCTION_ENTRY,             /*206*/
    MAC_FUNCTION_EXIT,
    MAC_FREEING_DLHARQ_ID,
    DL_HARQ_RLC_MEM_FREE_AM_MODE_FALSE_HARQ_IND, 
    MAC_DL_HARQ_TIMER_START_INFO_1,
    MAC_DL_HARQ_TIMER_START_INFO_2,
    MAC_TDD_TIMER_START_HARQ_SET_INFO,   /*212*/
    MAC_TDD_DL_HARQ_TIMER_START_INFO_1,
    MAC_TDD_DL_HARQ_TIMER_START_INFO_2,
    MAC_TDD_TIMER_START_HARQ_NOT_FREED,
    MAC_TDD_DL_HARQ_TIMER_NODE_ISVALID_IS_NOT_SET,
    MAC_DL_HARQ_ENTITY_TIMER_ARRAY_COUNT_IS_ZERO,
    MAC_EXPIRE_DL_HARQ_TIMER_NODE,
    MAC_DL_HARQ_ACK_NACK_QUEUE_COUNT,
    MAC_DL_HARQ_ACK_NACK_NODE_INFO,         /*220*/
    MAC_DL_HARQ_ACK_NACK_NODE_HARQ_INFO,
    MAC_QLOAD_ADDED_TO_NACK_QLOAD,         /*222*/
    MAC_NACK_QLOAD_CORRECTION_AFTER_FIRST_RETXN,
    MAC_PUT_ENTRY_IN_HARQ_ZERO_NON_ZERO_QLOAD_TRIGGER_QUEUE,
    MAC_PUT_ENTRY_IN_DLSCHEDULER_NEWTX_QUEUE_ID,
    MAC_PUT_ENTRY_IN_DLSCHEDULER_RETX_QUEUE_ID,
    MAC_PUT_ENTRY_IN_RETX_FAILURE_QUEUE_ID,
    MAC_PUT_ENTRY_IN_ULSCHEDULER_NEWTX_QUEUE_ID,
    MAC_DL_HARQ_RETX_RI_ZERO_ID,
    MAC_UL_HARQ_ALREADY_BUSY_ID,
    MAC_TDD_UL_HARQ_TIMER_START_ID,
    MAC_EXPIRE_UL_HARQ_TIMER_NODE_ID,
    MAC_PUSCH_RES_FAIL_FOR_NEW_TX_ID,
    MAC_UL_HARQ_RETX_MAX_TIME_ID,
    MAC_UL_HARQ_ADAP_RETX_ID,
    MAC_UL_HARQ_NONADAP_RETX_ID,
    /*DRX_CHANGES START*/
    /* SPR 2377 changes start */
    MAC_UE_ADDED_IN_ACTIVE_LIST_IN_UL_LOG_ID,
    MAC_UE_ADDED_IN_ACTIVE_LIST_IN_DL_LOG_ID,
    MAC_UE_DELETED_FROM_ACTIVE_LIST_IN_UL_LOG_ID,  /*232*/
    MAC_UE_DELETED_FROM_ACTIVE_LIST_IN_DL_LOG_ID,
    MAC_UE_NOT_SCHEDULED_IN_UL_LOG_ID,
    MAC_UE_NOT_SCHEDULED_IN_DL_LOG_ID,
    MAC_UE_NOT_SCHEDULED_IN_PDCCH_LOG_ID,            /*236*/
    /* SPR 2377 changes end */
    MAC_DRX_EVENT_TRIGGERED_LOG_ID,
    MAC_DRX_EVENT_HANDLED_LOG_ID,
    MAC_DRX_TIMER_EVENT_LOG_ID,
    MAC_DRX_NEXT_ONDURATION_TTI_CAL_LOG_ID,
    MAC_DRX_INVALID_EVENT_LOG_ID,
    MAC_TAG_RECEIVED_ID,                         /*242*/
    MAC_INVALID_PARAMETER_RECEIVED_ID,
    RRC_MAC_MSG_CELL_INDEX_ERR,/*MULTI_SECTOR*/
    MAC_TAG_PARSE_FAILURE_ID,
    MAC_UE_CREATE_SUCCESS_ID,
    MAC_UE_RECONFIGURE_SUCCESS_ID,
    MAC_MEAS_EVENT_HANDLER_ID,/* MEAS_GAP_CHG */
    MAC_MEAS_MAP_HANDLER_ID,/* MEAS_GAP_CHG */
    MAC_MEAS_TRIGGER_HANDLER_ID,/* MEAS_GAP_CHG*/
    /*RETX_CHG*/
    DRX_UE_NACK_RECIEVED_LOG_ID,
    DRX_RETX_UE_NOT_SCHEDULED_LOG_ID,            /*252*/
    DRX_RETX_UE_SCHEDULED_LOG_ID,
    DRX_HARQ_RETX_TIMER_EXPIRE_LOG_ID,
    /*RETX_CHG*/
    MAC_MEAS_DRX_INITIALISATION_ID,
    MAC_DRX_DELETE_TIMERS_LOG_ID,
    OAM_MAC_MSG_ID,                                
    RRC_PHY_CELL_CONFIG_REQ_ID,
    RRC_PHY_CREATE_UE_REQ_ID,                   /*259*/
    RRC_PHY_RECONFIG_UE_ENTITY_REQ_ID,
    RRC_PHY_DELETE_UE_ENTITY_REQ_ID,
    RRC_PHY_CELL_RECONFIG_REQ_ID,              /*262 */ 
    RRC_PHY_CELL_RECONFIG_RES_ID,
    MAC_CONFIG_CELL_REQ_ID,
    MAC_DL_Q_LOAD_ID,
    RRC_CHANGE_CRNTI_MSG_ID,
    RRC_HO_RACH_RESOURCE_REQ_MSG_ID,
    RRC_UE_INACTIVE_TIME_MSG_ID,
    RRC_HO_INVALID_CRNTI,
    RRC_HO_REL_RACH_RESOURCE_IND,
    MAC_RLF_IND_MSG_ID,        
    MAC_SEND_AUDIT_REPORT_MSG_ID,             /*272*/
    RRC_INVALID_CONTEXT_ID,
    MAC_PDCCH_ORDER_TRIGGERED,                       
    MAC_UL_SYNC_LOSS_DETECTED,
    MAC_TRANSMITTER_DCI_1A,
    MAC_UE_DELETED_FROM_ACTIVE_LIST_UL_SYNC_LOSS,
    MAC_UE_ADDED_IN_ACTIVE_LIST_UL_SYNC_LOSS,
    RA_RNTI_PROC_RAR_NOT_FOUND,
    RA_REQ_PROC_ID,
    RAR_PDU_PROC_ID,
    RAR_RARNTI_MAP_ID,                        /*282*/
    PREAMBLE_TIMER_EXPIRY_ID,
    PREAMBLE_TIMER_STOP_ID,
    PREAMBLE_TIMER_START_ID,                         
    CREATE_DL_UE_CONTXT_HO_ID,
    DEL_DL_UE_CONTXT_HO_ID,
    PREAMBLE_NOT_BUSY_ID,
    RECVD_INVALID_PREAMBLE,
    NO_HO_DL_UE_CONTEXT_ID,                  
    MAC_PDCCH_ORDER_TRIGGER_FAILURE,
    MAC_QUEUE_NODE_NOT_PROCESSED,            /*292*/                
    INIT_PREAMBLE_POOL_FAIL_ID,
    INIT_PREAMBLE_POOL_ID,
    BEFORE_ALLOC_PREAMBLE_ID,
    AFTER_ALLOC_PREAMBLE_ID,
    ALLOC_PREAMBLE_UE_ID,
    ALLOC_PREAMBLE_FAIL_ID,
    FREE_PREAMBLE_FAIL_ID,
    FREE_PREAMBLE_UE_ID,
    BEFORE_FREE_PREAMBLE_INFO_ID,
    AFTER_FREE_PREAMBLE_INFO_ID,             /*302*/
    LOGICAL_CHAIN_ID,
    MAC_MAX_RB_FOR_RAR_ID,
    MAC_RA_REQ_CNT_ID,
    RA_REQ_FREE_ID,     
    PREAMBLE_NO_UECONTEXT_ID,
    CBR_RA_REQ_PREAMBLE_MAP_ID,
    RAR_PDU_FREE_ID,
    MAC_TCRNTI_FAIL_ID,
    RA_REQ_RB_ALLOC_ID,
    RAR_SUBHEADER_VALUES_ID,                 /*312*/
    RAR1_PAYLOAD_VALUES_ID,
    RAR2_PAYLOAD_VALUES_ID,
    RAR3_PAYLOAD_VALUES_ID,                          
    MAC_UECONTEXT_FAIL_ID,
    CREATE_DL_UE_CONTXT_ID,
    MSG3_CRNTI_RECVD_ID,
    MSG3_CRNTI_TEMPCTXT_DEL_ID,
    PREAMBLE_TIMER_DELETE_ID,
    PREAMBLE_TIMER_NOCONTEXT_ID,
    MAC_HO_RACH_RESOURCE_RESP_MSG_ID,       /*322*/
    MAC_INACTIVE_UES_IND_MSG_ID,                     
    MAC_RECONFIG_CELL_PARAMS_INFO,              
    INVALID_RACH_CONFIG,
    MAC_CONFIG_CELL_PARAMS_INFO,
    MAC_INAVLID_TAG_MSG_ID,
    MAC_INVALID_TIMER_VAL_MSG_ID,
    MAC_TIMER_VAL_MSG_ID,
    MAC_HO_RACH_RESOURCE_RESP_PREAMBLE_INFO,
    MAC_INVALID_TA_ULSYNC_TIMER_VAL,
    MAC_TIMEALIGNMENT_ULSYNC_TIMER_VAL,     /*332*/
    MAC_UE_INACTIVE_TIME_RESP_MSG_ID,                
    MAC_INVALID_NODE,
    MAC_INAVLID_LEN_MSG_ID,                 
    MAC_RESET_NODE_PARAM_VAL,
    PROCESS_PENDING_RESET_UE_PARAMS,
    PREAMBLE_POINTER_NULL,
    CFR_ULHARQ_NOT_FREE,
    DLUECONTEXT_VALUE_MSIMATCH_ID,
    INVALID_PREAMBLE_INDEX_ID,
    CFR_RA_REQ_FREE_ID,                     /*342*/
    RRC_CHANGE_CRNTI_INVALID_PARAM,
    DEMUX_TCRNTI_MSG_ID,
    MSG3_DATA_MSG_NOCRNTI_CE_ID,
    MSG3_CRNTI_INCORRECT_STATE_ID,
    MSG3_CRNTI_DATA_RECVD_ID,
    MAC_UE_DATA_IND_ERR_ID,
    PREAMBLE_GROUP_A_CONFIG_INFO,
    PREAMBLE_GROUP_B_CONFIG_INFO,
    CONTENTION_FREE_PREAMBLE_CONFIG,       /*350*/
    MAC_UL_SYNC_ON,
    PDCCH_ORDER_TIMER_START_ID,            /*352*/
    PDCCH_ORDER_TIMER_STOP_ID,
    PDCCH_ORDER_TIMER_NOCONTEXT_ID, 
    PDCCH_ORDER_TIMER_EXPIRY_ID,
    MAC_PDCCH_ORDER_PARAM,
    MAC_UL_SYNC_LOSS_DRX_MEAS,
    MAC_TA_INSERTION,
    MAC_ULSYNCLOSS_DRX_MEASUREMENTGAP_STATE,
    MAC_CELL_DELETE_REQ_ID,
    RRC_PHY_DELETE_CELL_REQ_ID,
    MAC_CELL_DELETE_CNF,                  /*362*/
    RRC_PHY_CELL_DELETE_RES_ID,
    /* SPR 8194 Fix Start */
    MAC_PHY_START_REQ,
    MAC_PHY_CELL_CONFIG_REQ,
    MAC_PHY_PARAM_REQ,
    PHY_MAC_PARAM_RES,
    PHY_MAC_INVALID_MSG,                  /*368*/
    PHY_MAC_STATE_MACHINE_HANDLER,
    PHY_MAC_BYTES_READ,
    PHY_MAC_TLV_TAG,
    MAC_PHY_MSG_RETRANSMISSION,           /*372*/
    /* SPR 8194 Fix End */
    /* SPR 8196 Fix Start */
    MAC_OAM_INIT_IND,
    /* SPR 8196 Fix End */
    MAC_UE_CONTEXT_IS_NULL_IN_DL_LOG_ID,    
    MAC_UE_CONTEXT_IS_NULL_IN_UL_LOG_ID,    
    MAC_LC_NODE_NOT_PROCESSED_IN_DL_LOG_ID,
    MAC_LC_NODE_NOT_PROCESSED_IN_UL_LOG_ID,
    MAC_DL_STRATEGY_UE_ID,
    MAC_SCHEDULED_UE_HAS_NULL_POINTER,
    MAC_LC_PRIORITY_BEFORE_ONDURATON_DELAY_CONSIDERED_IN_DL_LOG_ID,
    MAC_LC_PRIORITY_BEFORE_ONDURATON_DELAY_CONSIDERED_IN_UL_LOG_ID,
    MAC_LC_PRIORITY_AFTER_ONDURATON_DELAY_CONSIDERED,
    MAC_LC_NODE_ALREADY_DELETED_FROM_TREE,   /*380*/
    MAC_TA_NODE_ALREADY_PROCESSED_FOR_UE,
    MAC_ALL_HARQ_ARE_BUSY,
    MAC_UE_DELETE_PENDING_IN_DL_LOG_ID,
    MAC_UE_DELETE_PENDING_IN_UL_LOG_ID,
    MAC_UE_CANT_BE_SCHEDULED,
    MAC_NUM_UE_PER_TICK_REACHED_IN_DL_LOG_ID,
    MAC_NUM_UE_PER_TICK_REACHED_IN_UL_LOG_ID,
    MAC_QUEUE_IS_EMPTY_IN_DL_LOG_ID,
    MAC_QUEUE_IS_EMPTY_IN_UL_LOG_ID,
    MAC_BSR_ADD_TRIGGER,                     /*390*/
    MAC_BSR_DELETE_TRIGGER,
    MAC_PUSH_IN_QUEUE_FAILURE_IN_DL_LOG_ID,
    MAC_PUSH_IN_QUEUE_FAILURE_IN_UL_LOG_ID,
    MAC_UL_SCHEDULED_UE_HAS_NULL_POINTER,
    MAC_UL_QOS_STRATEGY_RETRAVERSING,
    MAC_DL_STRATEGY_TX_NODE_CREATED,
    MAC_DL_MODIFY_UE_ID,
    /* QOS PDSCH MUX LOGS Change Start */
    MAC_RB_NOT_AVAILABLE_FOR_RETX,
    MAC_RESOURCE_ALLOCATED_AFTER_VALIDATING_TB_FOR_QOS_SPATIAL,
    MAC_RESOURCE_ALLOCATED_AFTER_VALIDATING_TB_FOR_QOS_NONSPATIAL,  /*400*/
    MAC_PDSCH_TBSIZE_LESS_THAN_DLSTRATEGY_MINTBS,
    MAC_EXCESS_POOL_RB_DECREEMENTED,
    MAC_EXCESS_POOL_RB_INCREEMENTED,
    MAC_NO_RB_LEFT_FOR_ALLOCATION,
    MAC_AVAILABLE_TB_LESS_THAN_THREE_BYTES,
    MAC_QOS_LC_NODE_NULL,                    /*406*/
    MAC_RETX_UE_SF_MISMATCH,
    /* + CQI_4.1 */
    MAC_RECEIVED_CQI_LOG_ID,
    MAC_RECEIVED_RI_LOG_ID,
    MAC_EFFECTIVE_CQI_CALC_LOG_ID,          /*410*/
    MAC_CORRECTED_WIDEBAND_CQI_LOG_ID,
    MAC_EFFECTIVE_SINR_MCS_ID,
    MAC_PERIODIC_UE_SELECTED_MODE_INFO_LOG_ID,
    MAC_APERIODIC_CQI_TRIGGERED_LOG_ID,
    MAC_SB_CQI_SUCCESS_LOG_ID,
    MAC_SB_CQI_FAILURE_LOG_ID,
    RRC_PHY_CELL_START_REQ_ID,
    RRC_PHY_CELL_START_RES_ID,
    /* SPR 10393 Changes Start */
    RRC_PHY_CELL_START_RES_ID_DEBUG,
    /* SPR 10393 Changes End */
    RRC_PHY_CELL_STOP_REQ_ID,
    RRC_PHY_CELL_STOP_RES_ID,
    RRC_MAC_CELL_START_REQ_ID,             /*420*/
    RRC_MAC_CELL_START_RES_ID,
    RRC_MAC_CELL_STOP_REQ_ID,
    RRC_MAC_CELL_STOP_RES_ID,
    /* Cell Start Stop Chg */
    /* Rel9_upgrade */
    MAC_SR_PROHIBIT_TIMER_ID,
    MAC_SR_PROHIBIT_TIMER_ID_EXPIRY,
    MAC_PUCCH_INIT_SR_MAP_FAIL,
    MAC_PUCCH_GET_PRB_FAIL,
    MAC_PUCCH_UPDATE_RES_INDEX_FAILED,
    /* Rel9_upgrade */
    /* CLPC CHANGE */
    MAC_TRANSMITTER_DCI_3Or3A,            
    MAC_ADD_ENTRY_TO_TPC_RNTI_TRIGGERED_UE_LIST_ID, /*430*/
    MAC_ADD_ENTRY_TO_TPC_TRIGGER_QUEUE_ID,
    MAC_ADD_ENTRY_EXPLICIT_TPC_FOR_PUSCH_ID,
    CQI_SINR_CALC_PUCCH_ID,
    HARQ_BLER_CALC_PUCCH_ID,
    TPC_PUCCH_CMD_ID,
    TPC_TRIGGER_Q_ENTRY_PUCCH_ID,
    TPC_EXPLICIT_TRIGGER_Q_ENTRY_PUCCH_ID,
    TPC_TRIGGER_UE_LIST_ENTRY_PUCCH_ID,
    TPC_TRIGGER_PUCCH, 
    TPC_TRIGGER_FORMAT_3OR3AQ_ENTRY_PUCCH_ID,       /*440*/
    MAC_TPC_RNTI_ENTRY_IN_SCHEDULED_3OR3A_QUEUE_ID,
    MAC_SCHEDULED_DCI3OR3A_PUSCH_ID,
    MAC_TPC_SENT_USING_DCI_FORMAT_0_ID,
    MAC_ADD_ENTRY_EXPLICIT_IN_DRX_PUSCH_ID,
    MAC_TPC_SENT_DCI_3OR3A_PUSCH_ID,
    MAC_DELETE_TRIGGERED_DCI3_UE_NODE_ID,
    DL_EXPLICIT_Q_PROCESS_ID,
    MAC_PDCCH_ALLOC_FAIL_ID,
    MAC_PDSCH_POWER_ID,
    MAC_COMMON_CCES_ALLOCATED_ID,               /*450*/
    MAC_INFO_IN_RAR,
    MAC_CONTENTION_RESOLUTION,
    MAC_DETERMINE_RB_FROM_TB_SIZE,
    MAC_MSG3_RESOURCE_ALLOCATED,
    PENDING_DELETE_UE,
    MAC_TICK_LD_CHANGE,
    MAC_INVALID_NUM_SEGMENTS,                           
    /*ICIC changes start */
    RRM_MAC_MSG_ID,
    MAC_RRM_INVALID_MSG_LEN_ID,                /*458*/ 
    MAC_RRM_WRONG_MODULE_ID, 
    MAC_RRM_INVALID_API_ID,                    /*460*/ 
    MAC_RRM_INVALID_CELL_CONFIG_BITMASK, 
    MAC_RRM_MESSAGE_SENT,
    MAC_RRM_INVALID_NUM_OF_CC_REGION, 
    MAC_RRM_INVALID_NUM_OF_CE_REGION, 
    MAC_RRM_INVALID_RB_VALUE,  
    MAC_RRM_INVALID_TOTAL_RB_VALUE,  
    MAC_RRM_DL_CC_INFO,
    MAC_RRM_DL_CC_INFO_TOTAL_RB,
    MAC_RRM_DL_CE_INFO, 
    MAC_RRM_UL_CC_INFO,                        /*470*/ 
    MAC_RRM_UL_TOTAL_RB, 
    MAC_RRM_UL_CE_INFO, 
    MAC_RRM_UE_LOC_INFO_ERR,
    MAC_RRM_DL_USER_LOC_TYPE_ERR,
    MAC_RRM_UL_USER_LOC_TYPE_ERR,
    MAC_RRM_INVALID_API_LEN ,
    MAC_RRM_TOTAL_UE,      
    MAC_RRM_UE_DOES_NOT_EXIST,
    MAC_RRM_INVALID_UE_INDEX_ERROR, 
    MAC_RRM_INVALID_USER_LOCATION_TYPE_ERROR,   /*480*/ 
    MAC_RRM_NO_DL_CELL_EDGE_REGION_EXIST, 
    MAC_RRM_NO_UL_CELL_EDGE_REGION_EXIST,
    MAC_RRM_UE_LOC_INFO,
    MAC_RRM_DL_USER_LOC_TYPE, 
    MAC_RRM_UL_USER_LOC_TYPE, 
    MAC_RRM_PERIODIC_REPORT_PARAMS_1, 
    MAC_RRM_PERIODIC_REPORT_PARAMS_2, 
    MAC_RRM_PERIODIC_REPORT_IND, 
    MAC_RRM_MESSAGE_SEND_FAIL, 
    MAC_RRM_INVALID_PERIODIC_REPORT_CONFIG_BITMASK, /*490*/
    MAC_RRM_INVALID_REPORT_REQUIERED_VALUE, 
    MAC_RRM_INVALID_PERIODICITY,
    MAC_RRM_PERIODICITY_VALUE_NOT_RECEIVED, 
    MAC_RRM_BATCH_SIZE_RECONFIG_NOT_ALLOWED,
    MAC_RRM_INVALID_UE_BATCH_SIZE,
    MAC_RRM_UE_BATCH_SIZE_VALUE_NOT_RECEIVED, 
    MAC_ULSCH_RA_INFO_INDEX, 
    MAC_ULSCH_RES_PARTITION_INFO, 
    MAC_NACK_ADAPTIVE_RES_ALLOC,
    MAC_ADV_CC_AVAIL_RES_INFO,             /*500*/ 
    MAC_CC_AVAIL_RES_INFO, 
    MAC_UPD_CE_AVAIL_RES_INFO, 
    MAC_UPD_CC_AVAIL_RES_INFO, 
    MAC_RES_ALLOC_INFO, 
    MAC_UCI_ULSCH_PDU_CHANGE, 
    MAC_REQ_RB_UE_INFO, 
    MAC_ADV_ALLOC_FLAG_RESET, 
    MAC_BUFF_POOL_RES_INFO,
    MAC_RIV_RES_INFO, 
    MAC_PUCCH_RES_ALLOC,                  /*510*/ 
    MAC_DIRECT_RES_ALLOC_INFO,
    MAC_ULSCH_CE_RES_PARTITION_INFO,
    MAC_NACK_RES_ALLOC_INFO,
    MAC_UCI_ULSCH_PDU_ASSIGN,
    MAC_PRACH_RES_ALLOC,
    MAC_NON_ADAPTIVE_RETXN_RES_ALLOC,
    MAC_AVG_SINR_UPDATE,
    MAC_PDSCH_INITIAL_BUFF_POOL_DETAILS,
    MAC_PDSCH_BUFF_POOL_ALLOC_DETAILS, 
    MAC_RAT0_BITMAP,                      /*520*/
    MAC_RAT1_SUBSET_INFO,
    MAC_PDCCH_SCHEDULING_DETAILS,
    MAC_PDSCH_UE_SCHEDULING_INFO,
    MAC_RAT2_DISTRIBUTED_RECONFIG,
    MAC_RAT2_LOCALISED_RECONFIG,
    MAC_RAT2_LOCALIZED_VRB_SPAN,
    MAC_PDSCH_UE_SCHEDULING_DETAILS,
    MAC_TOT_ACTIVE_UE_GT_MAX_UE_SCHEDULE, 
    MAC_TOT_ACTIVE_UE_GT_MAX_CE_UE,
    MAC_CE_RESOURCE_EXHAUSTED_PUT_IN_PRIORITY_Q,  /*530*/
    MAC_RR_HARQ_PROCESS_ALLOCATED,
    MAC_RR_UE_ADDED_IN_DL_USER_LIST,
    MAC_RR_CE_MAX_RB_GT_CC_MAX_RB,
    MAC_RR_RB_NOT_AVAILABLE_PUSHING_IN_TA_Q,
    MAC_RR_RB_NOT_AVAILABLE_FREE_HARQ,
    MAC_RR_UNUSED_RB_ADDED_TO_ALLOCATED_RB,
    MAC_RR_SUBTRACT_USED_RB_FROM_ALLOCATED_RB,
    MAC_RR_MAKING_UNUSED_RB_ZERO,                /*538*/
    MAC_UL_RR_MAX_UE_SCHEDULE_GT_NUM_OF_UE_SCHEDULE,
    MAC_UL_RR_MAX_UE_SCHEDULE_GT_TOTAL_ACTIVE_UE,  /*540*/
    MAC_UL_RR_MAX_CE_UE_GT_NUM_OF_UE_SCHEDULE,
    MAC_UL_RR_MAX_CE_UE_GT_TOTAL_ACTIVE_UE,
    MAC_UL_RR_PROCESSING_CE_PRIORITY_Q,
    MAC_UL_RR_PUSHING_TO_CE_PRIORITY_Q,
    MAC_UL_RR_SUBTRACT_USED_RB_FROM_ALLOCATED_RB,
    MAC_UL_RR_MAKING_UNUSED_RB_ZERO,
    MAC_DL_CE_UE_NOT_SCHEDULED,
    MAC_DL_CC_RESOURCE_ALLOCATED_TO_CE_UE,        /*548*/
    MAC_UL_CE_RESOURCE_GT_CC_CE_RESOURCE,                    
    /* Logs for DL QOS Starategy */
    MAC_RB_INFO_GBR_BEFORE_ALLOCATE_RB_IN_DL,     /*550*/
    MAC_RB_INFO_GBR_AFTER_ALLOCATE_RB_IN_DL,    
    MAC_RB_INFO_NONGBR_BEFORE_ALLOCATE_RB_IN_DL,
    MAC_RB_INFO_NONGBR_AFTER_ALLOCATE_RB_IN_DL, 
    MAC_RB_INFO_BEFORE_ALLOCATE_RB_IN_DL, 
    MAC_RB_INFO_AFTER_ALLOCATE_RB_IN_DL,
    MAC_RB_INFO_RETRAVERSAL_BEFORE_ALLOCATE_RB_IN_DL,
    MAC_RB_INFO_RETRAVERSAL_AFTER_ALLOCATE_RB_IN_DL,
    MAC_RB_TEST_BEFORE_ALLOCATE_RB_IN_DL,        /*558*/
    MAC_BUFFERPOOL_RB_INFO_AFTER_ALLOCATE_RB_IN_DL,  
    MAC_BUFFERPOOL_CE_RB_INFO_AFTER_ALLOCATE_RB_IN_DL, /*560*/
    MAC_UE_RB_INFO_BEFORE_ALLOCATE_RB_IN_UL,
    MAC_RB_INFO_BEFORE_ALLOCATE_RB_IN_UL,
    MAC_RB_UPDATE_INFO_AFTER_ALLOCATE_RB_IN_UL,   
    MAC_RB_RETRAVERSAL_INFO_BEFORE_ALLOCATE_RB_IN_UL,
    MAC_RB_RETRAVERSAL_INFO_AFTER_ALLOCATE_RB_IN_UL,
    MAC_SCHDULED_UE_INFO_IN_UL,
    /* DL common Logs */
    MAC_RB_INFO_PROCESS_TA_IN_DL,
    MAC_RB_UPDATE_INFO_PROCESS_TA_IN_DL,        /*568*/
    MAC_LC_NODE_NOT_PROCESSED_IN_DL,
    MAC_CELL_EDGE_UE_CSHDULED_IN_DL,            /*570*/
    MAC_CE_UE_NOT_BE_SCHDULED_UL,
    MAC_CE_UE_SCHDULED_IN_UL,
    /*ICIC changes end */
    MAC_CCE_ALLOC_FAIL_ID,
    MAC_RECV_INVALID_RNTI_ID,
    MAC_DLUECONTEXT_NOT_FOUND_ID,
    MAC_ULUECONTEXT_NOT_FOUND_ID,
    MAC_UEHARQCONTEXT_NOT_FOUND_ID,
    MAC_RESET_DLUECONTEXT_NOT_FOUND_ID,      /* 578 */
    MAC_RESET_ULUECONTEXT_NOT_FOUND_ID,
    DL_NEWTX_ONETBONLYRIONE_UE_SCHEDULED_LOG_ID, /*580*/
    DL_NEWTX_TWOTBONLY_UE_SCHEDULED_LOG_ID,
    DL_NEWTX_ONETBONLY_UE_SCHEDULED_LOG_ID,
    DL_RETX_UE_SCHEDULED_LOG_ID,
    DL_EXPLICIT_DCI_SCHEDULED_LOG_ID,
    DL_TA_QUEUE_SCHEDULED_LOG_ID,
    DL_DRX_QUEUE_SCHEDULED_LOG_ID,
    DL_PRIORITY_QUEUE_SCHEDULED_LOG_ID,
    DL_MAX_UE_SCHEDULED_AND_AVAILABLE_RB_PER_TICK,   /* 588 */
    DL_PRIORITY_SCHEDULED_FAILURE_LOG_ID,
    DL_TA_SCHEDULED_FAILURE_LOG_ID,             /*590*/
    DL_DRX_SCHEDULED_FAILURE_LOG_ID,
    DL_NEWTX_FAIR_SCHEDULED_FAILURE_LOG_ID,
    DL_NEWTX_RR_SCHEDULED_FAILURE_LOG_ID,
    UL_ROUND_ROBIN_SCHEDULED_LOG_ID,
    UL_QOS_SCHEDULED_LOG_ID,
    UL_FAIR_SCHEDULED_LOG_ID,
    UL_PEND_GRANT_QUEUE_SCHEDULED_LOG_ID,
    UL_CONTENTION_GRANT_QUEUE_SCHEDULED_LOG_ID,  /*598*/
    UL_SR_GRANT_QUEUE_SCHEDULED_LOG_ID,
    UL_CQI_GRANT_QUEUE_SCHEDULED_LOG_ID,         /*600*/
    UL_EXPLICIT_DCI_QUEUE_SCHEDULED_LOG_ID,
    UL_PRIORITY_QUEUE_SCHEDULED_LOG_ID,
    UL_MAX_UE_SCHEDULED_AND_AVAILABLE_RB_PER_TICK,
    MAC_INVALID_CAUSE_FOR_SPS_STATE,
    MAC_DL_SDL_TTI_FULL,
    MAC_DL_SPS_CURR_STATE,
    MAC_PDSCH_TB1_INVALID,                            
    MAC_PDSCH_TB2_INVALID,                       
    MAC_PDSCH_TB_INVALID,       /*coverity 25190 Fix*/
    MAC_SPS_NULL_SPS_CRNTI_LIST,                 /*610*/
    MAC_SPS_NULL_NODE,
    MAC_DL_SDL_OCC_LIST_FULL,
    MAC_MAX_SPS_LC_PER_UE, 
    MAC_NO_OCC_NODE,
    MAC_DL_UE_IN_DRX_MEAS_GAP,
    MAC_SPS_RECONFIG,
    MAC_UE_ID_RNTI_MAP,
    MAC_DRX_SPS_SUPPORT_UE,                          
    /*HD FDD Changes Start*/
    MAC_HD_FDD_UE_ADDED,
    MAC_HD_FDD_UE_DELETED,                     /*620*/
    MAC_HD_FDD_INVALID_FLAG,
    MAC_HD_FDD_CONFIG_SWITCH,
    MAC_HD_FDD_INVALID_CELL_DUPLEX_MODE,
    MAC_HD_FDD_DISCARD_DATA,
    MAC_HD_FDD_CHANGE_CRC_ACK_TO_NACK,
    MAC_HD_FDD_MIN_REPORTING,
    MAC_HD_FDD_WRONG_UE_INDEX,
    MAC_HD_FDD_CELL_NOT_SUPPORTED,
    MAC_HD_FDD_DL_CLASH_WITH_UL,
    MAC_HD_FDD_UL_CLASH_WITH_DL,                /*630*/
    /*HD FDD Changes End*/
/* MAC_TTI_LOG Start */
    MAC_TTI_DCI_LOG_INFO ,
    MAC_TTI_UL_CONF_LOG_INFO ,
    MAC_TTI_CELL_LOG_INFO ,
    MAC_PERIOD_CELL_LOG_INFO_ID,
    MAC_TTI_UE_LOG_INFO ,
/* MAC_TTI_LOG End */
    PUCCH_PUSCH_RES_OVERLAP_LOG_ID,             /*635*/
    /*START : DRX_MAC_CE : 5352*/
    MAC_DL_DRX_TRIGGER_INFO,
    MAC_UL_DRX_TRIGGER_INFO,
    /*END   : DRX_MAC_CE : 5352*/
/*SPR 5414 Fix Start */
    MAC_PDSCH_TB1_MCS_BEFORE_CHANGE,
    MAC_PDSCH_TB1_MCS_AFTER_CHANGE,
    MAC_PDSCH_TB2_MCS_BEFORE_CHANGE,            /*640*/
    MAC_PDSCH_TB2_MCS_AFTER_CHANGE,
    MAC_PDCCH_CFI_ADAPTATION,
/*SPR 5414 Fix End */
    /* ATB logs Changes */
    MAC_VALIDATE_ATB,
    MAC_PUSCH_POWER_ID,
    /* + SPR_5470 */
    HARQ_PONITER_NULL_LOG_ID,                   /*645*/
    /*- SPR_5470 */
    /*UL MU MIMO Start */
    MAC_CAND_SEL_UE_INFO_ID,
    MAC_CAND_FAIL_UE_INFO_ID,
    MAC_BUDDY_UE_INFO_ID,
    MAC_ULMIMO_ORTHO_N2DMRS_INFO_ID,
    MAC_ULSCH_NON_FSS_INFO_ID,                  /*650*/
    MAC_ULSCH_FSS_INFO_ID,
    MAC_UL_MIMO_RE_TX_INFO_ID,
    MAC_ULSCH_NON_FSS_FAILURE_INFO_ID,
    MAC_UL_QOS_UL_METRIC_CALC_PER_USER,
    MAC_DL_QOS_DL_METRIC_CALC_PER_USER,
    PHY_CELL_CONFIG_FAIL,
    PHY_START_FAILURE,
    PHY_UPLINK_PACKET_DELAY,
    TIMING_ADVANCE_VALUE,
    MAC_UPDATE_DL_RRM_RPT,                               /*660*/
    CELL_NOT_CONFIGURED,
    MAC_CTRL_SAP_STATE_MACHINE_HANDLER,
    MAC_CTRL_SAP_INVALID_EVENT_RECVD,
    MAC_QUEUE_EMPTY,
    MAC_UPDATE_UL_RRM_RPT,                         /*665*/
    /*UL MU MIMO End */
    /* Start AM and UM LC parameters changes */
    OAM_MAC_INVALID_PARAM_RECV,                 /*666*/
    /* End AM and UM LC parameters changes */
    MAC_DATA_TX_ID2,
    MAC_DATA_TX_ID3,
    L2_TX_DATA_SEND,
    MAC_TB_HEADER_INFO,                         /*670*/
    MAC_QOS_INSERT_NODE_PRIORITY_LC_TREE,
    MAC_QOS_DELETE_NODE_PRIORITY_LC_TREE,
    MAC_INSERT_SCH_LIST_NODE,
    MAC_DELETE_SCH_LIST_NODE,
    /* + E_CID_5.3 */
    MAC_RRM_ECID_REPORT_REQ_INFO,
    MAC_RRM_ECID_REPORT_RES_INFO,
    MAC_PDCCH_ORDER_FOR_ECID_REPORT,
    /* - E_CID_5.3 */
    /*4x4 DL MIMO CHG START*/
    OAM_MAC_INVALID_CQI_THRESHOLD_VAL_MSG_ID,
    MAC_RRC_TRANS_MODE_ID,
    MAC_RRC_NUM_ANT_ID,                          /*680*/
    MAC_RECEIVED_PMI_LOG_ID,
    /*4x4 DL MIMO CHG END*/
    /* + PRS_CHANGES */
    MAC_RRC_PRS_CONFIG_INFO,
    /* - PRS_CHANGES */
    /*HSM_CHG_START*/
    HSM_MAC_OAM_REQ_FAILURE,
    HSM_RLC_OAM_REQ_FAILURE,
    HSM_PDCP_OAM_REQ_FAILURE,
    HSM_GTPU_OAM_REQ_FAILURE,
    HSM_OAM_MAC_INIT_FAILURE,
    HSM_OAM_RLC_INIT_FAILURE,
    HSM_OAM_PDCP_INIT_FAILURE,
    HSM_OAM_GTPU_INIT_FAILURE,                   /*690*/
    HSM_THREAD_FAILURE,
    /*HSM_CHG_END*/
    /* Review comment fix start MAC_RESET_9 */
    MAC_DL_RESET_FAILURE_ID,
    MAC_SENT_SYNC_IND_TO_RRC_ID,
    MAC_MANDATORY_CONFIG_CELL_REQ_PARAM_SET1,
    MAC_MANDATORY_CONFIG_CELL_REQ_PARAM_SET2,
    MAC_MANDATORY_CONFIG_CELL_REQ_PARAM_SET3,
    MAC_TDD_CONFIG_INFO_PARAM,
    MAC_RACH_CONFIG_INFO_PARAM_SET1,
    MAC_RACH_CONFIG_INFO_PARAM_SET2,
    MAC_PREAMBLE_GROUP_A_CONFIG_PARAM,            /*700*/
    MAC_PHICH_CONFIG_INFO_PARAM,
    MAC_PUCCH_CONFIG_INFO_PARAM,
    MAC_RBS_FOR_DCI_1A_PARAM,
    MAC_RBS_FOR_DCI_1C_PARAM,
    MAC_SRS_COMMON_CONFIG_PARAM,
    MAC_SRS_COMMON_SETUP_INFO_PARAM,
    MAC_SRS_MAX_UPPTS_PARAM,
    MAC_PDSCH_CONFIG_COMMON_INFO_PARAM,
    MAC_DOWNLINK_POWER_CONTROL_COMMON_PARAM,
    MAC_UPLINK_POWER_CONTROL_COMMON_PARAM,        /*710*/
    MAC_PUSCH_CONFIG_COMMON_PARAM,
    MAC_FREQUENCY_SELECTIVE_ENABLE_PARAM,
    MAC_UL_SYNC_LOSS_TIMER_INFO_PARAM,
    MAC_NGAP_VALUE_PARAM,
    MAC_EXPLICIT_CELL_START_REQUIRED_PARAM,
    MAC_POWER_CONTROL_ENABLE_PARAM,
    MAC_TPC_RNTI_RANGE_PARAM,
    MAC_DYNAMIC_PDCCH_INFO_PARAM,
    MAC_SPS_CRNTI_RANGE_PARAM,
    MAC_PRS_CONFIG_INFO_PARAM,                   /*720*/
    MAC_PRS_BANDWIDTH_INFO_PARAM,
    MAC_PRS_SUBFRAMES_INFO_PARAM,
    MAC_PRS_CONFIG_INDEX_INFO_PARAM,
    MAC_PRS_TRANSMISSION_POWER_INFO_PARAM,
    MAC_PRS_MUTING_CONFIG_INFO_PARAM,
    MAC_MIB_MSG_INFO_PARAM,
    MAC_SIBTYPE1_MSG_INFO_PARAM,
    MAC_SI_MSG_INFO_PARAM,
    MAC_SI_MSG_INFO_PARAM_SET1,
    MAC_NUM_SI_REPETITIONS_PARAM,                 /*730*/
    MAC_NUM_SI_TRANSMISSIONS_PARAM,
    MAC_SI_START_OFFSET_PARAM,
    MAC_SI_MSG_BUFFER_PARAM,
    MAC_SCHEDULING_REQD_FOR_SIB8_INFO_PARAM,
    MAC_MANDATORY_RECONFIG_CELL_REQ_PARAM,
    MAC_DCI_FORMAT_FOR_SI_MSG_PARAM,
    MAC_UE_INACTIVITY_TIMER_CONFIG_PARAM,
    MAC_CONTENTION_FREE_RACH_TIMER_INFO_PARAM,
    MAC_SFN_GAP_INFO_PARAM,
    MAC_MSG_SEG_NEXT_FAIL_CONFIG_CELL_REQ,        /*740*/
    MAC_MSG_SEG_NEXT_FAIL_PCCH_CCCH_BCCH_UE_CON_REJ_REQ,
    MAC_INCORRECT_CRNTI_RECVD_ID,
    MAC_UL_PDU_RESERVE_BIT_SET_ID,
    MAC_PUCCH_MIN_RB_FAIL,
    MAC_VALIDATE_UE_PUCCH_RES_FAILURE_ID,
    PHY_CELL_CONFIG_TDD_PARAM_FAIL,
    MAC_PARSING_ERROR,
    MAC_RESET_UE_ENTITY_REQ_ID,
    MAC_RRC_OAM_HPTOLP_THDH_ID,
    MAC_UL_UE_CONTEXT_NULL,                      /*750*/
    MAC_RESET_UE_ENTITY_FAILURE_CNF,
    MAC_RRM_INVALID_UE_INDEX_VALUE,
    MAC_RRM_INVALID_MU_MIMO_STATUS,
    MAC_RRM_INVALID_MU_MIMO_NUM_ANTENNA_CONFIG,
    MAC_RRC_INVALID_MU_MIMO_STATUS,
    MAC_RRC_NUM_TX_ANTENNA_INVALID,
    MAC_DL_UE_TO_BE_SCHEDULED,
    MAC_UL_UE_TO_BE_SCHEDULED,
    MAC_RRM_RECONFIG_UE_TO_BE_SCHEDULED_DL_UL,
    MAC_UL_HARQ_TIMER_STOP_FAIL,                 /*760*/
    MAC_NO_ALLOC_PRACH_RES,
    L2_CREATE_MEM_POOL_FAIL,
    MAC_PHY_TIMEOUT,
    MAC_OAM_SEND_ERR_IND,
    MAC_RECV_ERR_IND_FRM_PHY,                      /*765*/
    MAC_DELETE_ON_UL_HARQ_TIMER_EXPIRY,
    MAC_ON_SFN_MISMATCH,
    MAC_REVERT_POWER_CONTROL,
    MAC_NO_ACTION_UL_CONFIG_ERR_PDU,
    MAC_UL_CONFIG_ERR_PDU,                         /*770*/ 
    MAC_NOT_EQ_SFN_SF_IN_SFI_WITH_L2_TICK,
    MAC_PUT_ENTRY_IN_TPC,
    /* SPR 16143 fix start */
    MAC_SR_INFO_DELETE,
    MAC_SR_INFO_RECONFIG,
    MAC_RECONFIGURE_SR_NODE_MAP,
    MAC_RECONFIGURE_SR_NODE_MAP_1,
    MAC_RECONFIGURE_SR_NOT_REQD,
    MAC_CREATE_SR_MAP,
    MAC_HP_THREAD_PROCESS_RRC_MSG,
    /* SPR 16583 fix start */
    MAC_RNTI_NOT_SAME,
    /* SPR 16583 fix end */
    /* SPR 16143 fix end */
    MAC_RECV_ERR_FOR_TTIB_DATA,
    /* SPR 16766 fix start */
    MAC_MUX_ENCODE_FAIL_ID,
    MAC_UE_DATA_REQ_ID,
    MAC_UE_DATA_REQ_EACH_LC_ID,
    MAC_SEND_CCCH_TO_RRC_ID,
    MAC_UL_CCCH_MSG_ID,
    MAC_UL_PHR_LCH_MSG_ID,
    MAC_UL_SHORT_OR_TRUNCATED_BSR_LCH_MSG_ID,
    MAC_UL_LONG_BSR_LCH_MSG_ID,
    MAC_NULL_NODE,
    MAC_DROP_CCCH_NODE,
    MAC_DROP_CCCH_NODE_1,
    MAC_CCCH_CCE_UNAVAILABLE,
    MAC_AGG_LVL_MORE_THAN_AV_CCE,
    MAC_TCRNTI_ALLOC,
    /* SPR 17112 Fix Start */
    MAC_TX_DLSCH_UE_CAT,
    /* SPR 17112 Fix End */
    /* SPR 16916 FIX START */
    MAC_DL_ACTIVE_UE_QCI_LOG_ID,
    MAC_UL_ACTIVE_UE_QCI_LOG_ID,
    /* SPR 16916 FIX END */
    MAC_TOT_ACTIVE_UE_ZERO,
    /* SPR 16766 fix end */
    MAC_INVALID_HARQ,                              
    MAC_PUSCH_FAILURE_SECOND_EXECUTION,
    MAC_UE_SCELL_ERR_RESPONSE,
    MAC_INVALID_HARQ_ID,
    MAC_HI_NUM_ACK_NACK,
    MAC_HI_MODE,
    PHY_CELL_PRS_CONFIG_FAIL,                      /*780*/
    MAC_INVALID_CELL_ID,
    MAC_SCELL_NOT_ACTIVE,
    MAC_INVALID_TRANSMISSION_MODE,                
    MAC_UNABLE_STOP_DL_HARQ_TIMER,
    MAC_DL_CONFIG_ERR_RECVD,
    MAC_EL_DL_EXPIRY,
    MAC_LOAD_WISE_PREF_CELL_LIST,
    MAC_MCS_WISE_PREF_CELL_LIST,
    MAC_PREF_CELL_LIST,
    MAC_APPLY_PREF_FACTOR_1,                      /*790*/
    MAC_APPLY_PREF_FACTOR_2,
    MAC_APPLY_PREF_FACTOR_3,                      
    MAC_APPLY_PREF_FACTOR_4,
    MAC_SCHD_LC_ON_PREF_CELL_1,    
    MAC_SCHD_LC_ON_PREF_CELL_2,
    /* + SPR 13605 Fix */
    MAC_SCHD_LC_ON_PREF_CELL_3,
    MAC_SCHD_LC_ON_PREF_CELL_4,
    MAC_SCHD_LC_ON_PREF_CELL_5,
    /* - SPR 13605 Fix */
    MAC_ALLOCATED_RBS_FOR_RETX,
    MAC_RB_ALLOCATION_FAIL_FOR_RETX,
    MAC_PREF_CELL_LIST_FOR_RETX,
    MAC_RBS_ASSIGNED_FOR_RETX_1,
    MAC_RBS_ASSIGNED_FOR_RETX_2,                  /*800*/
    MAC_RBS_ASSIGNED_FOR_RETX_3,
    MAC_PREF_CELL_LIST_FOR_RETX_FAIL,             
    MAC_SCHD_SCELL_ACT_DEACT_CE,
    /* CA TDD Changes Start */
    MAC_VALIDATE_TDD_CONFIG_CA_ENABLED_CELLS,
    /* CA TDD Changes End */
    /* SPR 12055 Fix Start */
    OAM_MAC_INVALID_SPS_QCI_MAP, 
    /* SPR 12055 Fix End */
    MAC_LC_ALREADY_SCHEDULED,
    MAC_MUX_LC_1,
    MAC_MUX_LC_2,
    MAC_MUX_LC_3,
    MAC_MUX_LC_4,                                 /*900*/ 
    MAC_MUX_LC_5,                                 
    MAC_MUX_LC_6,
    MAC_MUX_LC_7,
    MAC_MUX_LC_8,
    MAC_ALLOC_PRACH_RES,
    MAC_PRACH_RB_MORE,
    /* SPR 13903 fix start */
    MAC_CHECK_CODE_RATE_FAILURE_LOG_ID,
    MAC_UL_SPS_CURR_STATE,
    FAPI_INTF_LOG_ID,
    /* SPR 16962 + */
    MAC_DELETE_UE_CONTEXT_ON_OWN,
    /* SPR 16962 - */
#ifdef LTE_EMBMS_SUPPORTED
    MAC_AREA_CONFIG_FAIL_ID,
    MAC_COUNTING_MSG_FAIL_ID,
    MAC_CURR_MAX_LOG_ID = MAC_COUNTING_MSG_FAIL_ID,
#else
    /* SPR 16962 + */
    MAC_CURR_MAX_LOG_ID = MAC_DELETE_UE_CONTEXT_ON_OWN,
#endif
    /* SPR 16962 - */
    /* SPR 13903 fix end */
    LOG_MAX_MAC_ID=MAC_CURR_MAX_LOG_ID
};

/********************************************************
 *        Definitions for Log Categories
 *******************************************************/

#define    L2_SYS_FAIL 1
#define    MAC_L1_INF (2ull * L2_SYS_FAIL)
#define    MAC_UL_HARQ (2ull * MAC_L1_INF)
#define    MAC_RACH (2ull * MAC_UL_HARQ)
#define    MAC_RRC_INF (2ull * MAC_RACH)
#define    MAC_OAM_INF (2ull * MAC_RRC_INF)
#define    MAC_RRM_INF (2ull * MAC_OAM_INF)
#define    MAC_DL_Strategy (2ull * MAC_RRM_INF)
#define    MAC_UL_Strategy (2ull * MAC_DL_Strategy)
#define    MAC_PDSCH (2ull * MAC_UL_Strategy)
#define    MAC_PDCCH (2ull * MAC_PDSCH)
#define    MAC_PUSCH (2ull * MAC_PDCCH)
#define    MAC_PUCCH (2ull * MAC_PUSCH)
#define    MAC_BCCH (2ull * MAC_PUCCH)
#define    MAC_PCCH (2ull * MAC_BCCH)
#define    MAC_CCCH (2ull * MAC_PCCH)
#define    MAC_DL_HARQ (2ull * MAC_CCCH)
#define    MAC_CQI (2ull * MAC_DL_HARQ)
#define    MAC_SRS (2ull * MAC_CQI)
#define    MAC_TB_UL (2ull*MAC_SRS)
#define    MAC_TB_DL (2ull * MAC_TB_UL)
#define    MAC_DL_PC (2ull * MAC_TB_DL)
#define    MAC_UL_PC (2ull * MAC_DL_PC)
#define    MAC_DRX  ( 2ull*MAC_UL_PC )
#define    MAC_MEAS_GAP (2ull*MAC_DRX)
#define    MAC_MEAS_HANDLER ( 2ull * MAC_MEAS_GAP )
#define    MAC_UL_CSI (2ull * MAC_MEAS_HANDLER)
/* QOS MUX Logs Change Start */
#define    MAC_MUX (2ull * MAC_UL_CSI)
/* QOS MUX Logs Change End */
#define    MAC_DL_SPS_STRATEGY (2ull * MAC_MUX)
#define    MAC_UL_SPS_STRATEGY (2ull * MAC_DL_SPS_STRATEGY)
#define    MAC_SCHEDULER       (2ull * MAC_UL_SPS_STRATEGY)
#define    MAC_ATB             (2ull * MAC_SCHEDULER)
#define    MAC_TA (2ull * MAC_ATB)
#define    DL_RESOURCE_MGR (2ull * MAC_TA)
#define    MAX_MAC_CATEGORY   DL_RESOURCE_MGR 

#define    RLC_AM (2ull * (MAX_MAC_CATEGORY))
#define    RLC_UM  (2ull * RLC_AM)
#define    RLC_TM  (2ull * RLC_UM)
#define    RLC_TX  (2ull * RLC_TM)
#define    RLC_RX  (2ull * RLC_TX)
#define    RLC_MAC  (2ull * RLC_RX)
#define    RLC_PDCP  (2ull * RLC_MAC)
#define    RLC_RRC  (2ull * RLC_PDCP)
#define    RLC_OAM  (2ull * RLC_RRC)
#define    RLC_TIMER (2ull * RLC_OAM)
#define    LOG_MAX_RLC_CATEGORY RLC_TIMER

#define    PDCP_RRCOAM (2ull * (LOG_MAX_RLC_CATEGORY))
#define    PDCP_TX  (2ull * (PDCP_RRCOAM ))
#define    PDCP_RX  (2ull * (PDCP_TX )) 
#define    PDCP_RRM_INT  (2ull * (PDCP_RX )) 
#define    LOG_MAX_PDCP_CATEGORY PDCP_RRM_INT

/*SPR 2030 fix Start*/
/* Packet Relay + eGTPu logging Categories*/
#define    PR_GTPU_CONTROL (2ull * (LOG_MAX_PDCP_CATEGORY))
#define    PR_GTPU_OAM     (2ull * (PR_GTPU_CONTROL))
#define    PR_GTPU_DL_DATA (2ull * (PR_GTPU_OAM))
#define    PR_GTPU_UL_DATA (2ull * (PR_GTPU_DL_DATA))
#define    PR_GTPU_COMMON  (2ull * (PR_GTPU_UL_DATA))
#define    PR_GTPU_HO_DATA (2ull * (PR_GTPU_COMMON))
#ifdef LTE_EMBMS_SUPPORTED
#define    L2_EMBMS_CAT (2ull * (PR_GTPU_HO_DATA))
#define    LOG_MAX_PR_GTPU_CATEGORY L2_EMBMS_CAT
#else
#ifdef ENDC_ENABLED
/*Dual Connectivity SeNB changes +*/
#define    X2U_RELAY (2ull * (PR_GTPU_HO_DATA))
#define    LOG_MAX_PR_GTPU_CATEGORY   X2U_RELAY
/*Dual Connectivity SeNB changes -*/
#else
#define    LOG_MAX_PR_GTPU_CATEGORY PR_GTPU_HO_DATA
#endif
#endif

#define    MAX_LOG_CATEGORY ( 2ull * (LOG_MAX_PR_GTPU_CATEGORY))
/*SPR 2030 fix End*/

#define    ALL_LOG_CATEGORY_SET ((2ull *  MAX_LOG_CATEGORY) - 1ull)


typedef enum enLogIdT
{
    PDCP_CONTEXT_ALREADY_INITIALIZED = LOG_MAX_MAC_ID+1, /*805*/
    ROHC_CONTEXT_UNUSED,
    PDCP_CONTEXT_NOT_INITIALIZED,
    PDCP_UNINITIALIZED_CONTEXT_TX,
    PDCP_UNINITIALIZED_CONTEXT_RX,            /*808*/
    PDCP_UE_CONTEXT_STATE_TX,
    PDCP_UE_CONTEXT_STATE_RX,                 /*810*/
    PDCP_DISCARD_TIMER_ASSOCIATED,
    PDCP_NO_DISCARD_TIMER_ASSOCIATED,
    PDCP_SDU_SN_HFN_TX,
    PDCP_SDU_SN_HFN_RX,
    PDCP_SDU_COUNT,       
    PDCP_ROHC_COMPRESSION_FAILED,
    PDCP_CIPHERING_FAILED,
    PDCP_ROHC_DECOMPRESSION_FAILED, 
    PDCP_DECIPHERING_FAILED,
    PDCP_INTEGRITY_VERIFICATION_FAILED,       /*820*/ 
    PDCP_PDU_FROM_PDCP_TO_RLC,
    PDCP_PDU_FROM_RLC_TO_PDCP,
    PDCP_HEADER_APPENDED,
    PDCP_DATA_BEFORE_CIPHERING,
    PDCP_DATA_AFTER_DECIPHERING,
    PDCP_DATA_PDU_FROM_RLC,
    PDCP_CONTROL_PDU_FROM_RLC,
    PDCP_DUPLICATE_PACKET_RECEIVED_FROM_RLC,  /*800*/
    PDCP_SDU_SIZE_GREATER_THAN_LIMIT,
    PDCP_SDU_SENT_UPPER_LAYER,
    PDCP_RLC_STATUS_IND_RECVD,
    PDCP_DATA_POINTER_NULL,
    PDCP_MSG_ALLOC_FAILED,                    /*805*/
    PDCP_MSG_EXTRACT_FAILED,           
    PDCP_MSG_INSERT_FAILED,            
    PDCP_MSG_CLONE_FAILED,             
    PDCP_MSG_REMOVE_FAILED,            
    PDCP_MSG_RESERVE_FAILED,                  /*810*/
    PDCP_GET_MEM_FROM_POOL_FAILED,     
    PDCP_MSG_JOIN_FAILED,              
    PDCP_INVALID_TLV_MESSAGE_LENGTH,
    PDCP_RRC_MESSAGE_FAIL,
    PDCP_OAM_MESSAGE_FAIL,
    PDCP_PARAMS_TO_INTEGRITY_ENGINE,
    PDCP_CALC_MAC_I,                   
    PDCP_RECV_MAC_I,                   
    PDCP_RRC_REQUEST_FOR_UE,           
    PDCP_HEXDUMP_OAM_RRC_MSG,                /*820*/ 
    PDCP_SRC_ID_INCORRECT,             
    PDCP_DEST_ID_INCORRECT,            
    PDCP_INVALID_OPTIONALPARAM_LEN,
    PDCP_INVALID_DATA_SIZE,
    PDCP_INVALID_UE,
    PDCP_INVALID_TAG_ID,               
    PDCP_TAG_ID_NOT_CHKED,
    PDCP_RRC_CELL_INDEX_ERR,
    PDCP_CONTEXT_PARAMS,
    PDCP_INTEGRITY_PARAMS,                  /*830*/
    PDCP_SRB_CIPHERING_PARAMS,
    PDCP_DRB_CIPHERING_PARAMS,         
    PDCP_CONF_DIS_TIMER,
    PDCP_CONF_SN_SIZE,
    PDCP_CONF_STATUS_REPRT,                 /*835*/
    PDCP_CONF_ROHC,                    
    PDCP_OAM_API_NS,                   
    PDCP_RRC_API_NS,
    PDCP_INVALID_LC,                   
    PDCP_INVALID_DIR,                       /*840*/
    PDCP_STATE_VARS_RESET_TX,
    PDCP_CONTROL_PDU_NOT_HANDLED_PROPERLY,  
    PDCP_DISCARD_TIMER_EXPIRE,              
    PDCP_NULL_HEADER,                       
    PDCP_UNKNOWN_ALGO_ID,                   /*845*/
    PDCP_DATA_TO_INTEGRITY_ENGINE,          
    PDCP_DATA_TO_CIPHERING_ENGINE,          
    PDCP_DATA_TO_ROHC_ENGINE,               
    PDCP_WRONG_SN_SIZE,         
    PDCP_SIGNALING_PDU_FROM_RLC,            /*850*/
    PDCP_STATUS_IND_GTPU,
    PDCP_STATUS_IND_RRC,                    
    PDCP_INVALID_RLC_MODE,
    PDCP_OPTIONAL_TAG_FAILS,                
    PDCP_INVALID_DISCARD_TIMER_VALUE,
    PDCP_INVALID_ROHC_PROFILE_VALUE,
    PDCP_INVALID_STATUS_REPORT_VALUE,       
    PDCP_ROHC_CONTEXT_ALREADY_INITIALIZED,
    PDCP_INVALID_MODULE_ID,                 
    PDCP_INVALID_CRNTI,                     /*860*/
    PDCP_INVALID_OLD_CRNTI,
    PDCP_INVALID_UE_CONTEXT,  
    PDCP_STORAGE_NULL,
    PDCP_DL_DATA_FWD_FAILS,                 
    PDCP_UL_DATA_FWD_FAILS,
    PDCP_OUT_WINDOW_DISCARD,
    PDCP_MSG_SEG_NEXT_FAILED,               
    PDCP_SDU_NOT_SENT_UPPER_LAYER,
    PDCP_NULL_NODE_Q,                       
    PDCP_NO_UL_BITMAP,                      /*870*/
    PDCP_NO_UL_BITMAP_SENT,
    PDCP_SDU_FROM_PACKET_RELAY_TO_PDCP,
    PDCP_SDU_ENQUEUED_FROM_RRC,
    PDCP_UE_CTX_ALREADY_CREATED,
    PDCP_RESUME_REQ,
    PDCP_RE_ESTABLISH_REQ,
    PDCP_SN_HFN_STATUS_REQ_RECVD,
    PDCP_Q_EMPTY,
    PDCP_CHANGE_CRNTI_REQ_RECVD,
    PDCP_INVALID_EVENT_RCVD,                /*880*/
    PDCP_EVENT_RCVD,
    PDCP_RX_EVENT_RCVD,
    PDCP_TX_EVENT_RCVD,
    PDCP_STATE_VARS_RESET_RX,               
    PDCP_FRESH_SDU_NOT_PROCESSED,
    PDCP_INVALID_STATE,
    PDCP_UE_CANNOT_DELETE,
    PDCP_SDU_FWDED_TO_PACKET_RELAY,
    PDCP_EMI_RECVD,
    PDCP_DELETE_RB_AFTER_EMI,
    PDCP_RECEIVED_MAX_SDU,                 
    PDCP_RETRANSMIT_PDU_FOR_RLC_Q_FULL,     /*890*/ 
    PDCP_LC_DELETE_FAILURE,                
    PDCP_SEC_INIT_FAILS,                   
    PDCP_SEC_CONTEXT_CREATE,
    PDCP_SEC_INIT,
    PDCP_SEC_CONTEXT_DELETE,
    PDCP_SEC_POLL_JOB_RING,
    PDCP_SEC_CALL_CALLBACK_FUNCTION,       
    PDCP_INVALID_RB,
    PDCP_INVALID_QCI,
    PDCP_DISCARD_TIMER_SDU_NOT_DELETED,     /*900*/
    PDCP_TX_SDU_Q_FULL,
    PDCP_MULTIPLE_SPS_SETUP_NOT_VALID,     
    PDCP_UE_SPS_STATE,
    PDCP_RRM_INVALID_MSG_ID,
    PDCP_RRM_INVALID_MODULE_ID,
    PDCP_RRM_MSG_SENT_FAIL,
    PDCP_DRB_ECN_CN_MSG,
    PDCP_RRM_INVALID_MSG_LENGTH,
    PDCP_EXCEED_MAX_UE,
    PDCP_EXCEED_MAX_LC,                     /*910*/
    PDCP_INVALID_ECN_FEATURE,
    PDCP_INVALID_WATERMARK_VALUE,           
    PDCP_INVALID_CONGESTION_DIRECTION,
    PDCP_SPS_INTERVAL_PROFILE_IS_NULL, 
    /* SPR 8196 fix start*/
    PDCP_OAM_INIT_IND,                      /*915*/ 
    PDCP_CANNOT_ADD_UL_BITMAP,
    /* SPR 8196 fix end*/
    PDCP_INTRA_HO_FWD_FAIL,                /*917*/
    PDCP_RECV_PSR,
    PDCP_PRINT_VERSION_NUM,
    PDCP_TRAFFIC_NOT_ALLOWED,
#ifdef LTE_EMBMS_SUPPORTED
/* RLC EMBMS changes Start */
    /* createAreaEntity error */
    LTE_RLC_RRC_HANDLE_AREA_ENTITY_REQ_ERR, /*921*/
    LTE_RLC_RRC_HANDLE_CREATE_AREA_ENTITY_REQ_ERR,
    LTE_RLC_RRC_HANDLE_CREATE_AREA_ENTITY_REQ,
    LTE_RLC_PARSE_CREATE_AREA_MSG_ERR_1,
    LTE_RLC_PARSE_CREATE_AREA_MSG_ERR_2,
    LTE_RLC_PARSE_CREATE_AREA_MSG_ERR_3,
    LTE_RLC_PARSE_CREATE_AREA_MSG_ERR_4,
    LTE_RLC_CREATE_AREA_CTX_ERR,
    LTE_RLC_CREATE_AREA_CTX_ERR_1,
    LTE_RLC_CREATE_AREA_CTX_ERR_2,
    LTE_RLC_CREATE_AREA_CTX_ERR_3,
    /* AreaConfigReq Msg error */
    LTE_RLC_RRC_HANDLE_CONFIG_AREA_REQ_ERR, /*932*/
    LOG_RLC_AREA_CONFIG_INFO_PARSE_ERR,
    LOG_RLC_AREA_CONFIG_INFO_PARSE_ERR_1,
    LOG_RLC_AREA_CONFIG_INFO_PARSE_ERR_2,
    LOG_RLC_AREA_CONFIG_INFO_PARSE_ERR_3,
    LOG_RLC_AREA_CONFIG_INFO_PARSE_ERR_4,
    /* RRC RLC MCCH IND error Start */
    LTE_RLC_RRC_HANDLE_RRC_RLC_MCCH_IND_ERR, /* 938*/
    LTE_RLC_RRC_HANDLE_RRC_RLC_MCCH_IND_ERR_1,
    LTE_RLC_RRC_HANDLE_RRC_RLC_MCCH_IND_ERR_2,
    LTE_RLC_RRC_HANDLE_RRC_RLC_MCCH_IND_ERR_3,
    /* RRC RLC MCCH IND error End */
    /*  deleteAreaEntity error End */
    LTE_RLC_RRC_HANDLE_DELETE_AREA_ENTITY_REQ, /* 942 */
    LTE_RLC_PARSE_DELETE_AREA_IDX_ERR,
    LTE_RLC_PARSE_DELETE_AREA_IDX_ERR_1,
    LTE_RLC_PARSE_DELETE_AREA_IDX_ERR_2,
    /*  deleteAreaEntity error End */
    LTE_RLC_DB_FETCH_AREA_CTX_ERR,
    PDCP_CURR_MAX_LOG_ID = LTE_RLC_DB_FETCH_AREA_CTX_ERR,
/* RLC EMBMS changes End */
#else
    PDCP_CURR_MAX_LOG_ID = PDCP_TRAFFIC_NOT_ALLOWED,
#endif
    PDCP_MAX_LOG_ID=PDCP_CURR_MAX_LOG_ID

}enLogId;

typedef enum enRlcLogIdT {
    
    LTE_RLC_SEND_DEL_IND_FAILED = PDCP_MAX_LOG_ID + 1,  /*918*/
    LTE_RLC_RX_AM_SDU, 
    LTE_RLC_RX_AM_SDU_ERR,                   /*920*/
/***************End of lteRlcTxProcessor.c*************/
    LTE_RLC_NULL_TID_NODE_IN_DEL_IND,
    LTE_RLC_INVALID_CASE_IN_DEL_IND, 
    LTE_RLC_INVALID_SN_IN_DEL_IND,
    LTE_RLC_FREE_SDU_TID_FAILED,
    LTE_RLC_NULL_RETX_PDU_IN_DEL_IND,
    LTE_RLC_NO_TID_PRESENT_FOR_DEL_IND,
    LTE_RLC_FREE_RETX_BUFFER_FAILED,
    LTE_RLC_SEND_DEL_IND,
    LTE_RLC_STATE_VARS_ON_DEL_IND,
    LTE_RLC_NON_ZERO_DC_CPT_IN_CONTROL_PDU,
    LTE_RLC_OUT_OF_RANGE_ACK_RECVD_1,
    LTE_RLC_OUT_OF_RANGE_ACK_RECVD_2,
    LTE_RLC_ACK_OUT_OF_WINDOW_1,
    LTE_RLC_ACK_OUT_OF_WINDOW_2,
    LTE_RLC_EMPTY_NACK_Q_IN_ENCODING,
    LTE_RLC_STATUS_PDU_SIZE_CALCULATION,
    LTE_RLC_NULL_RETX_PDU_POINTER,
    LTE_RLC_QLOAD_CALCULATION,
    /******Interfaces********/
    /***lteRlcRrcInterface.c***/
    /* RLC - Socket Interface */
    LTE_RLC_REPORT_ERROR_TO_RRC,
    LTE_RLC_HANDLE_SOCKET_MSG_ERR,
    LTE_RLC_HANDLE_SOCKET_MSG_ERR_1,
    LTE_RLC_HANDLE_SOCKET_MSG_ERR_2,
    LTE_RLC_HANDLE_RECV_SOCKET_MSG_ERR,
    LTE_RLC_HANDLE_RECV_SOCKET_MSG_ERR_1,
    LTE_RLC_HANDLE_RECV_SOCKET_MSG_ERR_2,
    LTE_HANDLE_RLC_DELETE_ENTITY,
    LTE_RLC_DOWNLINK_COMM_CH_EXIST,
    LTE_RLC_UPLINK_COMM_CH_EXIST,
    LTE_RLC_CREATE_UE_CTX_ERR,/*(4)used again in another function another file-lteRlcRrcParseUtil.c*/
    LTE_RLC_CREATE_UE_CTX_ERR_1,/*(4)used again in another function another file-lteRlcRrcParseUtil.c*/
    LTE_RLC_CREATE_UE_CTX_ERR_2,/*(4)used again in another function another file-lteRlcRrcParseUtil.c*/
    LTE_RLC_CREATE_UE_CTX_ERR_3,/*(4)used again in another function another file-lteRlcRrcParseUtil.c*/
    LTE_RLC_CREATE_UE_CTX_ERR_4,
    LTE_RLC_INVALID_ENTITY, /**(3) used again in another function*/
    LTE_RLC_INVALID_ENTITY_1, /**(3) used again in another function*/
    LTE_RLC_INVALID_ENTITY_2, /**(3) used again in another function*/
    LTE_RLC_INVALID_UECONTEXT,/**(3) used again in another function*/   		
    LTE_RLC_INVALID_UECONTEXT_1,/**(3) used again in another function*/   		
    LTE_RLC_INVALID_UECONTEXT_2,/**(3) used again in another function*/   		
    LTE_RLC_RECONFIG_UE_ENTITY_1,
    LTE_RLC_RECONFIG_UE_ENTITY_2,
    LTE_RLC_ENTITY_MARKED_IN_PENDING_DEL_QUEUE,
    LTE_RLC_ENTITY_IN_PENDING_DEL_QUEUE,
    LTE_RLC_REESTAB_UM_TX_ENTITY,
    LTE_RLC_PARSE_RRC_CELL_INDEX_ERR,/*MULTI_SECTOR*/
    LTE_RLC_REESTAB_UM_RX_ENTITY,/*(2)in another function*/
    LTE_RLC_REESTAB_UM_TXRX_ENTITY,/*(2)in another function*/
    LTE_RLC_DELIVERY_STATUS_IND, /*(2)*/
    LTE_RLC_DELIVERY_STATUS_IND_1, /*(2)*/
    LTE_RLC_REESTAB_AM_RX_ENTITY_1,
    LTE_RLC_ADD_DFE_TO_AM_PDU,
    LTE_RLC_ADD_DFE_TO_AM_PDU_1,
    LTE_RLC_ADD_DFE_TO_AM_PDU_2,
    LTE_RLC_ENCODE_AMD_PDU_HEADER,

    /*** lteRlcOamInterface.c  ***/
    /* Cleanup request */
    LTE_RLC_OAM_INTERFACE_CLEANUP_ERR,
    LTE_RLC_OAM_INTERFACE_CLEANUP_ERR_1,
    /* OAM GET Stats */
    LTE_RLC_OAM_GET_STATS_ERR,
    LTE_RLC_OAM_GET_STATS_ERR_1,
    LTE_RLC_OAM_GET_STATS_ERR_2,
    FILL_UM_STATUS_ERR,   /*(2)*/
    FILL_UM_STATUS_ERR_1,   /*(2)*/
    FILL_AM_STATUS_ERR,   /*(2)*/
    FILL_AM_STATUS_ERR_1,   /*(2)*/
    FILL_UE_STATUS_ERR,
    /* OAM */ 
    LTE_RLC_OAM_STATUS_ERR,
    LTE_RLC_OAM_STATUS_ERR_1,
    LTE_RLC_OAM_STATUS_ERR_2,
    LTE_RLC_OAM_STATUS_ERR_3,
    LTE_RLC_CONFIG_INIT_ERR,
    LTE_RLC_CONFIG_INIT_ERR_1,
    LTE_RLC_CONFIG_INIT_ERR_2,
    /* RLC_INIT_LAYER_REQ (handleOamRequests) */
    LTE_RLC_HANDLE_RLC_OAM_INIT_LAYER_ERR,
    LTE_RLC_HANDLE_RLC_OAM_INIT_LAYER_ERR_1,
    LTE_RLC_HANDLE_RLC_OAM_INIT_LAYER_ERR_2,
    /* OAM Reset STATS */
    LTE_RLC_OAM_RESET_STATS_ERR,
    LTE_RLC_OAM_RESET_STATS_ERR_1,
    /* RLC - OAM Interface */
    LTE_RLC_HANDLE_OAM_REQ_ERR,
    LTE_RLC_HANDLE_OAM_REQ_ERR_1,
    LTE_RLC_HANDLE_OAM_REQ,
    /* getRLC Build configuration */
    LTE_RLC_BUILD_CONFIGURATION_ERR,
    LTE_RLC_BUILD_CONFIGURATION_ERR_1,
/*******"lteRlcMacInterface.c"********/
    LTE_RLC_INVALID_UE_INDEX_OR_LC,
/*****lteRlcRrcParseUtil.c***********/
   /* RRC*/
    LTE_RLC_PARSE_RRC_MSG_ERR,
    LTE_RLC_PARSE_RRC_MSG_ERR_1,
    LTE_RLC_SEND_COMM_CH_DATA_FAILED, /* 690 */
    LTE_RLC_COMM_CH_RECONFIG_FAILED,
    LTE_RLC_PARSE_UE_IDX_ERR, /*(3)*/
    LTE_RLC_PARSE_UE_IDX_ERR_1, /*(3)*/
    LTE_RLC_PARSE_UE_IDX_ERR_2, /*(3)*/
    LTE_RLC_INVALID_RNTI, /*(3)*/
    LTE_RLC_INVALID_RNTI_1, /*(3)*/
    LTE_RLC_INVALID_RNTI_2, /*(3)*/
    LTE_RLC_PARSE_CREATE_MSG_ERR,
    LTE_RLC_PARSE_CREATE_MSG_ERR_1,
    LTE_RLC_PARSE_CREATE_MSG_ERR_2,
    LTE_RLC_PARSE_CREATE_MSG_ERR_3,
    LTE_RLC_PARSE_CREATE_MSG_ERR_4,
    LTE_RLC_RRC_HANDLE_CREATE_UE_ENTITY_REQ_ERR,
    LTE_RLC_RRC_HANDLE_CREATE_UE_ENTITY_REQ,
    LTE_RLC_HANDLE_RLC_DELETE_ENTITY,
    LTE_RLC_HANDLE_RLC_RECONFIG_ERR,/*(2)*/
    LTE_RLC_HANDLE_RLC_RECONFIG_ERR_1,/*(2)*/
    LTE_RLC_HANDLE_RLC_RE_ESTABLISH_ERR,
    LTE_RLC_HANDLE_RLC_RE_ESTABLISH_ERR_1,
    LTE_RLC_RRC_HANDLE_UE_ENTITY_REQ_ERR,
    LTE_RLC_RRC_HANDLE_UE_ENTITY_REQ,
    LTE_RLC_SEND_CNF_MSG_TO_RRC,
    LTE_RLC_COMM_CH_CREATION_FAILED,
    LOG_RLC_COMM_CH_INVALID_OPERATION,
    LTE_RLC_CREATE_TX_UM_RLC_ERR,
    LTE_RLC_CREATE_TX_UM_RLC_ERR_1,
    LTE_RLC_CREATE_TX_UM_RLC_ERR_2,
    LTE_RLC_CREATE_TX_UM_RLC_ENTITY,
    LTE_RLC_CREATE_RX_UM_RLC_ERR,
    LTE_RLC_CREATE_RX_UM_RLC_ERR_1,
    LTE_RLC_CREATE_RX_UM_RLC_ERR_2,
    LTE_RLC_CREATE_RX_UM_RLC_ERR_3,
    LTE_RLC_CREATE_RX_UM_RLC_ENTITY,
    LTE_RLC_CREATE_TX_RX_UM_ERR,
    LTE_RLC_CREATE_TX_RX_UM_ERR_1,
    LTE_RLC_CREATE_TX_RX_UM_ERR_2,
    LTE_RLC_CREATE_TX_RX_UM_ERR_3,
    LTE_RLC_CREATE_TX_RX_UM_ENTITY,
    LTE_RLC_CREATE_RX_TX_ENTITY,/*(2)*/
    LTE_RLC_CREATE_RX_TX_ENTITY_1,/*(2)*/
    LTE_RLC_CREATE_RX_TX_ENTITY_2,
    LTE_RLC_CREATE_RX_TX_ERR,
    LTE_RLC_CREATE_RX_TX_ERR_1,
    LTE_RLC_CREATE_RX_TX_ERR_2,
    LTE_RLC_CREATE_RX_TX_ERR_3,
    LTE_RLC_CREATE_RX_TX_ERR_4,
    LTE_RLC_CREATE_RX_TX_ERR_5,
    LTE_RLC_CREATE_RX_TX_ERR_6,
    LTE_RLC_CREATE_RX_TX_ERR_7,
    LTE_RLC_PARSE_DEL_TX_UM_ERR,
    LTE_RLC_PARSE_DEL_TX_UM_ERR_1,
    LTE_RLC_PARSE_DEL_TX_UM_ENTITY,
    LTE_RLC_PARSE_DEL_RX_UM_ERR,
    LTE_RLC_PARSE_DEL_RX_UM_ERR_1,
    LTE_RLC_PARSE_DEL_RX_UM_ENTITY,
    LTE_RLC_PARSE_DEL_TX_RX_UM_ERR,
    LTE_RLC_PARSE_DEL_TX_RX_UM_ERR_1,
    LTE_RLC_PARSE_DEL_TX_RX_UM_ENTITY,
    LTE_RLC_PARSE_DEL_TX_RX_AM_ERR,
    LTE_RLC_PARSE_DEL_TX_RX_AM_ERR_1,
    LTE_RLC_PARSE_DEL_TX_RX_AM_ENTITY,
    LTE_RLC_PARSE_RECONFIG_TX_UM_ERR,
    LTE_RLC_PARSE_RECONFIG_TX_UM_ERR_1,
    LTE_RLC_PARSE_RECONFIG_TX_UM_ERR_2,/* does not exist */
    LTE_RLC_PARSE_RECONFIG_TX_UM_ENTITY,
    LTE_RLC_PARSE_RECONFIG_RX_UM_ERR,
    LTE_RLC_PARSE_RECONFIG_RX_UM_ERR_1,
    LTE_RLC_PARSE_RECONFIG_RX_UM_ERR_2,
    LTE_RLC_PARSE_RECONFIG_RX_UM_ENTITY,
    LTE_RLC_PARSE_RECONFIG_RX_TX_UM_ERR,
    LTE_RLC_PARSE_RECONFIG_RX_TX_UM_ERR_1,
    LTE_RLC_PARSE_RECONFIG_RX_TX_UM_ERR_2,
    LTE_RLC_PARSE_RECONFIG_RX_TX_UM_ENTITY,
    LTE_RLC_PARSE_RECONFIG_AM_ERR,
    LTE_RLC_PARSE_RECONFIG_AM_ERR_1,
    LTE_RLC_PARSE_RECONFIG_AM_ERR_2,
    LTE_RLC_PARSE_RECONFIG_AM_ERR_3,
    LTE_RLC_PARSE_RECONFIG_AM_ERR_4,
    LTE_RLC_PARSE_RECONFIG_AM_ERR_5,
    LTE_RLC_PARSE_RECONFIG_AM_ERR_6,
    LTE_RLC_PARSE_RECONFIG_AM_ERR_7,
    LTE_RLC_PARSE_RECONFIG_AM_ENTITY,
    LTE_RLC_PARSE_RECONFIG_AM_ENTITY_1,
    LTE_RLC_PARSE_RE_ESTABLISH_ERR, /*(2)*/
    LTE_RLC_PARSE_RE_ESTABLISH_ERR_1, /*(2)*/
    LTE_RLC_PARSE_RE_ESTABLISH,
    LTE_RLC_RRC_PARSE_UE_ENTITY_INFO_ERR,
    LTE_RLC_PARSE_UE_ENTITY_INFO,
    LTE_RLC_RRC_PARSE_UE_ENTITY_INFO,/*does not exist*/
    LTE_RLC_STATE_MACHINE_INFO,
/***"lteRlcRrcExtInterface.c"***/
    LTE_RLC_SOCKET_CREATION_FAILED,/*(2)*/
    LTE_RLC_SOCKET_CREATION_FAILED_1,/*(2) does not exist in code*/
    LTE_RLC_SOCKET_ADDRESS_CONVERSION_ERROR,/*(3) in another function*/
    LTE_RLC_SOCKET_OPEN_ERROR,		
    LTE_RLC_SOCKET_BIND_FAILED,
/* UM Mode*/
    /****lteRlcUmdEncode.c****/
    LTE_RLC_ADD_DFE_TO_PDU_ERR,
    LTE_RLC_ADD_DFE_TO_PDU_ERR_1,
    LTE_RLC_ADD_DFE_TO_PDU_ERR_2,
    LTE_RLC_ENCODE_PDU_HEADER_ERR,
    LTE_RLC_ENCODE_PDU_HEADER_1,/*should be HEADER_ERR */
    LTE_RLC_ENCODE_UMD_RAW_PDU_ERR,
    LTE_RLC_ENCODE_UMD_RAW_PDU_ERR_1,
    LTE_RLC_ENCODE_UMD_RAW_PDU_ERR_2,
    LTE_RLC_ENCODE_UMD_RAW_PDU_ERR_3,
    LTE_RLC_ENCODE_UMD_RAW_PDU_ERR_4,
    LTE_RLC_ENCODE_UMD_RAW_PDU_ERR_5,
    LTE_RLC_ENCODE_UMD_RAW_PDU_ERR_6,
    LTE_RLC_ENCODE_UMD_RAW_PDU_ERR_7,
    LTE_RLC_ENCODE_UMD_RAW_PDU, /* should be PDU_ERR */
    LTE_RLC_ENCODE_UMD_RAW_PDU_1,
    LTE_RLC_UM_TX_OPP_IND,
    /***"lteRlcUmTxOperation.c"*******/
    LTE_RLC_RX_UM_SDU_ERR,
    LTE_RLC_RX_UM_SDU,
    LTE_RLC_RX_UM_SDU_DISCARD_ERR,
    LTE_RLC_RX_UM_SDU_DISCARD,
    /***********"lteRlcUmdDecode.c"******/
    LTE_RLC_DECODE_UMD_HEADER_ERR,
    LTE_RLC_DECODE_UMD_HEADER_ERR_1,
    LTE_RLC_DECODE_UMD_RAW_PDU_ERR,
    LTE_RLC_DECODE_UMD_RAW_PDU_ERR_1,/*(2)*/
    LTE_RLC_DECODE_UMD_RAW_PDU_ERR_2,
    LTE_RLC_DECODE_UMD_RAW_PDU, 
    LTE_RLC_DECODE_UMD_RAW_PDU_ERR_4,/*(2)*/
    LTE_RLC_DECODE_AND_ENQ_SEG_ERR,
    LTE_RLC_DECODE_AND_ENQ_SEG,
    LTE_RLC_DECODE_AND_ENQ_LAST_SEGMENT,
    /***lteRlcUmRxOperation.c***/
    LTE_RLC_RECEIVE_UM_PDU_ERR,  /*was not there*/
    LTE_RLC_IS_VALID_RX_UM_PDU_ERR,
    LTE_RLC_IS_VALID_RX_UM_PDU_ERR_1,
    LTE_RLC_HANDLE_UM_PDU_ERR, /*(2)was not there*/
    LTE_RLC_HANDLE_UM_PDU_ERR_1, /*(2)was not there*/
    LTE_RLC_HANDLE_UM_PDU_ERR_2,
    LTE_RLC_HANDLE_UM_PDU_ERR_3,
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER,
   /* LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_1, */
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_2,
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_3,
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_4,
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_5,
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_6,
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_7,
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_8,
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_9,
    LTE_RLC_ACTION_UM_PDU_IN_RECEPTION_BUFFER_10,
    LTE_RLC_ACTION_UM_RO_TIMER_EXPIRY_ERR,
    LTE_RLC_ACTION_UM_RO_TIMER_EXPIRY_ERR_1,
    LTE_RLC_ACTION_UM_RO_TIMER_EXPIRY,
    LTE_RLC_ACTION_UM_RO_TIMER_EXPIRY_1,
    LTE_RLC_ACTION_UM_RO_TIMER_EXPIRY_2,
    LTE_RLC_DELIVER_UM_SDU_DIRECTLY,
    LTE_RLC_REASSEMBLE_IN_CMP_SDU_ERR,/* wrong INFO in main file*/
    LTE_RLC_REASSEMBLE_IN_CMP_SDU,
    LTE_RLC_REASSEMBLE_IN_CMP_SDU_ERR_1,
    LTE_RLC_REASSEMBLE_IN_CMP_SDU_1,
    LTE_RLC_REASSEMBLE_IN_CMP_SDU_2,
    LTE_RLC_REASSEMBLE_IN_CMP_SDU_ERR_2,
    LTE_RLC_DELIVER_UM_SDU_TO_PDCP,
    LTE_RLC_DELIVER_UM_SDU_TO_PDCP_1,
    LTE_RLC_DELIVER_UM_SDU_TO_PDCP_ERR,
    LTE_RLC_HANDLE_RLC_REASSEMBLE_SDU,
    LTE_RLC_HANDLE_RLC_REASSEMBLE_SDU_1,
    LTE_RLC_HANDLE_RLC_REASSEMBLE_UM_SDU,
/****************Start of lteRlcRxProcessor.c*************/
    LTE_RLC_MSG_ALLOC_FAIL,
    LTE_RLC_VALIDATE_AND_GET_ENTITY_ERR,
    LTE_RLC_VALIDATE_AND_GET_ENTITY_ERR_1,
    LTE_RLC_VALIDATE_AND_GET_ENTITY_ERR_2,
    LTE_RLC_VALIDATE_AND_GET_ENTITY_ERR_3,
    LTE_RLC_VALIDATE_AND_GET_ENTITY_ERR_4,
	LTE_RLC_VALIDATE_AND_GET_ENTITY_ERR_5,
	LTE_RLC_VALIDATE_AND_GET_ENTITY_ERR_6,
	LTE_RLC_VALIDATE_AND_GET_ENTITY_ERR_7,
	LTE_RLC_VALIDATE_AND_GET_ENTITY_ERR_8,
	LTE_RLC_HANDLE_UM_RX_PACKET,
	LTE_RLC_HANDLE_UM_RX_PACKET_ERR,
	LTE_RLC_HANDLE_AM_RX_PACKET,
	LTE_RLC_HANDLE_AM_RX_PACKET_ERR,
	LTE_RLC_HANDLE_DATA_FROM_MAC_ERR,
	LTE_RLC_HANDLE_DATA_FROM_MAC_ERR_1,
	LTE_RLC_HANDLE_DATA_FROM_MAC_ERR_2,
	LTE_RLC_GET_HEADER_INFO,
	LTE_RLC_GET_HEADER_INFO_1,
    LTE_RLC_DB_DELETE_RLC_ENTITY,        /*800*/
    LTE_RLC_DB_DELETE_RLC_ENTITY_1,        /*800*/
    LTE_RLC_RECEIVE_UM_PDU_ERR_1,
    LTE_RLC_RECEIVE_UM_PDU_ERR_2,
    LTE_RLC_RECEIVE_UM_PDU,
/***************End of lteRlcRxProcessor.c*************/
/****************Start of lteRlcTxProcessor.c*************/
	LTE_RLC_IS_VALID_UE_DATA_REQ_ERR,
	LTE_RLC_IS_VALID_UE_DATA_REQ_ERR_1,
	LTE_RLC_GET_ENTITY_ERR,
	LTE_RLC_GET_ENTITY_ERR_1,
	LTE_RLC_GET_ENTITY_ERR_2,
	LTE_RLC_GET_ENTITY_ERR_3,
	LTE_RLC_GET_ENTITY_ERR_4,
	LTE_RLC_HANDLE_DATA_FROM_PDCP_ERR,
	LTE_RLC_HANDLE_HARQ_FAILURE_IND_ERR,
	LTE_RLC_HANDLE_HARQ_FAILURE_IND_ERR_1,
	LTE_RLC_HANDLE_HARQ_FAILURE_IND_ERR_2,
	LTE_RLC_HANDLE_HARQ_FAILURE_IND_ERR_3,
    LTE_RLC_HANDLE_HARQ_FAILURE_IND_ERR_4,
	LTE_RLC_HANDLE_HARQ_FAILURE_IND_ERR_5,
	LTE_RLC_HANDLE_HARQ_FAILURE_IND,
	LTE_RLC_UM_TX_OPP_ERR,
	LTE_RLC_UM_TX_OPP_ERR_1,
	LTE_RLC_AM_TX_OPP_ERR,
	LTE_RLC_TX_OPP_VALIDATE_1,
	LTE_RLC_TX_OPP_VALIDATE_2,
	LTE_RLC_TX_OPP_VALIDATE_3,
	LTE_RLC_TX_OPP_VALIDATE_4,
	LTE_RLC_TX_OPP_VALIDATE_5,
	LTE_RLC_TX_OPP_1,
        LTE_RLC_TX_LD_CHANGE,
	LTE_RLC_TX_OPP_2,
	LTE_RLC_TX_OPP_3,
	LTE_RLC_TX_OPP_4,
    /*******************************************************************************************/
   /* Timer Functionality - lteRlcTimer.c */
    LTE_RLC_START_SP_TIMER_ERR,
    LTE_RLC_START_SP_TIMER_ERR_1,
    LTE_RLC_START_SP_TIMER_ERR_2,
    LTE_RLC_START_SP_TIMER,
    LTE_RLC_STOP_SP_TIMER_ERR,
    LTE_RLC_STOP_SP_TIMER_ERR_1,
    LTE_RLC_STOP_SP_TIMER_ERR_2,
    LTE_RLC_STOP_SP_TIMER, /*770*/
    LTE_RLC_EXPIRE_SP_TIMER_ERR,
    LTE_RLC_EXPIRE_SP_TIMER_ERR_1,
    LTE_RLC_EXPIRE_SP_TIMER_ERR_2,
    LTE_RLC_EXPIRE_SP_TIMER_ERR_3,
    LTE_RLC_EXPIRE_SP_TIMER,
    LTE_RLC_RESTART_SP_TIMER_ERR,
    LTE_RLC_RESTART_SP_TIMER,
    LTE_RLC_RESTART_SP_TIMER_1,
    LTE_RLC_START_UM_RO_TIMER_ERR,
    LTE_RLC_START_UM_RO_TIMER_ERR_1,
    LTE_RLC_START_UM_RO_TIMER_ERR_2,
    LTE_RLC_START_UM_RO_TIMER,
    LTE_RLC_STOP_UM_RO_TIMER_ERR,
    LTE_RLC_STOP_UM_RO_TIMER_ERR_1,
    LTE_RLC_STOP_UM_RO_TIMER_ERR_2,
    LTE_RLC_STOP_UM_RO_TIMER,
    LTE_RLC_EXPIRE_UM_RO_TIMER_ERR,
    LTE_RLC_EXPIRE_UM_RO_TIMER_ERR_1,
    LTE_RLC_EXPIRE_UM_RO_TIMER_ERR_2,
    LTE_RLC_EXPIRE_UM_RO_TIMER_ERR_3,
    LTE_RLC_EXPIRE_UM_RO_TIMER,
    LTE_RLC_RESTART_UM_RO_TIMER_ERR,
    LTE_RLC_RESTART_UM_RO_TIMER,
    LTE_RLC_RESTART_UM_RO_TIMER_1,
    LTE_RLC_START_AM_RO_TIMER_ERR,
    LTE_RLC_START_AM_RO_TIMER_ERR_1,
    LTE_RLC_START_AM_RO_TIMER_ERR_2,
    LTE_RLC_START_AM_RO_TIMER,
    LTE_RLC_STOP_AM_RO_TIMER_ERR,
    LTE_RLC_STOP_AM_RO_TIMER_ERR_1,
    LTE_RLC_STOP_AM_RO_TIMER_ERR_2,
    LTE_RLC_STOP_AM_RO_TIMER,
    LTE_RLC_EXPIRE_AM_RO_TIMER_ERR,
    LTE_RLC_EXPIRE_AM_RO_TIMER_ERR_1,
    LTE_RLC_EXPIRE_AM_RO_TIMER_ERR_2,
    LTE_RLC_EXPIRE_AM_RO_TIMER_ERR_3,
    LTE_RLC_EXPIRE_AM_RO_TIMER,
    LTE_RLC_RESTART_AM_RO_TIMER_ERR,
    LTE_RLC_RESTART_AM_RO_TIMER,         
    LTE_RLC_RESTART_AM_RO_TIMER_1,        
    LTE_RLC_START_AM_PR_TIMER_ERR,
    LTE_RLC_START_AM_PR_TIMER_ERR_1,
    LTE_RLC_START_AM_PR_TIMER_ERR_2,
    LTE_RLC_START_AM_PR_TIMER,
    LTE_RLC_STOP_AM_PR_TIMER_ERR,
    LTE_RLC_STOP_AM_PR_TIMER_ERR_1,
    LTE_RLC_STOP_AM_PR_TIMER_ERR_2,
    LTE_RLC_STOP_AM_PR_TIMER,
    LTE_RLC_EXPIRE_AM_PR_TIMER_ERR,
    LTE_RLC_EXPIRE_AM_PR_TIMER_ERR_1,
    LTE_RLC_EXPIRE_AM_PR_TIMER_ERR_2,
    LTE_RLC_EXPIRE_AM_PR_TIMER_ERR_3,
    LTE_RLC_EXPIRE_AM_PR_TIMER,
    LTE_RLC_RESTART_AM_PR_TIMER_ERR,
    LTE_RLC_RESTART_AM_PR_TIMER,
    LTE_RLC_RESTART_AM_PR_TIMER_1,
    /*need to remove existing logIds later*/
    /*******************************************************************************************/
    LTE_RLC_PDU_TYPE , 
    LTE_RLC_POLLING_INFO,
    LTE_RLC_SETTING_POLL_BIT_1,
    LTE_RLC_SETTING_POLL_BIT_2,
    LTE_RLC_POLL_BIT_NEW_TRANSMISSION,
    LTE_RLC_SUCCESS_IND_TO_PDCP,
    LTE_RLC_AM_PDU_SUCCESS_IND_TO_PDCP,
    LTE_RLC_SETTING_POLL_BIT_FOR_MORE_TX,
    LTE_RLC_SN_OUTSIDE_TX_WINDOW,
    LTE_RLC_POLL_TIMER_EXPIRE,          /*510*/ 

    LTE_RLC_NO_NACK_IN_STATUS_REPORT,
    LTE_RLC_ENQUEUEING_NACK_LIST,
    LTE_RLC_NO_PDU_FOR_TRANSMISSION,
    LTE_RLC_WRONG_INDEX_FOR_RE_TX,
    LTE_RLC_RECEIVED_LAST_ACK,
    LTE_RLC_NACK_ON_POLL_TIMER_EXPIRY,
    LTE_RLC_RE_TX_AM_SDU,
    LTE_RLC_SN_NOT_RE_TX,
    LTE_RLC_WRONG_INDEX_FOR_SUCCESS_IND,
    LTE_RLC_DECODE_STATUS_PDU,	/*520*/
    LTE_RLC_OUT_OF_RANGE_SN_IN_DEL_IND,
    LTE_RLC_MAC_BO_REQUEST,
    LTE_RLC_POLL_BIT_FOR_RE_TX,
    LTE_RLC_NO_TID_PRESENT,
    LTE_RLC_NO_TX_BUFFER,
    LTE_RLC_ACK_OUTSIDE_TX_WINDOW,
    LTE_RLC_RING_SLOT_NOT_FREE_1,
    LTE_RLC_RING_SLOT_FREE,
    LTE_RLC_ENCODING_FAILED_FOR_CONTROL_PDU,
    LTE_RLC_ENCODING_STATUS_PDU,
    LTE_RLC_DECODING_AM_HEADER,      /*530*/		

    LTE_RLC_FIX_HEADER_DECODED_1,
    LTE_RLC_NO_RE_TX_PDU,
    LTE_RLC_FIX_HEADER_DECODED_2,
    LTE_RLC_DECODING_COMPLETED,
    LTE_RLC_REASSEMBLY,
    LTE_RLC_DECODING_AM_SEGMENT_HEADER,
    LTE_RLC_FAILED_TO_POPULATE_REC_BUFFER,
    LTE_RLC_AM_SEGMENT_PROCESS_FAILED,
    LTE_RLC_PROCESS_AM_SEGMENT_PDU,
    LTE_RLC_DECODING_FAILED,		    /*540*/ 

    LTE_RLC_MSG_REMOVE_FAIL,
    LTE_RLC_SN_RECEIVED,
    LTE_RLC_NULL_POINTER_RECEIVED_FOR_SDU,
    LTE_RLC_MEM_ALLOC_FAILURE,
    LTE_RLC_GET_MEM_FROM_POOL_FAIL,
    LTE_RLC_AM_PDU_RECEIVED_FOR_DECODING,
    LTE_RLC_LAST_AM_SDU_RECEIVED,
    LTE_RLC_COUNT_DFE,
    LTE_RLC_CURRUPTED_AM_PDU_RECEIVED,
    LTE_RLC_REQUESTED_SIZE_LESS_THAN_FIXED_HEADER,   /*550*/

    LTE_RLC_NO_DATA_FOR_AM_ENTITY,	
    LTE_RLC_SN_OUTSIDE_TX_WINDOW_FOR_ENCODING,
    LTE_RLC_RECEIVED_PDU_FOR_ENCODING,
    LTE_RLC_REQUEST_FOR_QUEUE_SIZE,
    LTE_RLC_ENCODING_COMPLETE_FOR_FRESH_PDU_1,
    LTE_RLC_ENCODING_COMPLETE_FOR_FRESH_PDU_2,
    LTE_RLC_TX_STATE_VARS,
    LTE_RLC_ENCODE_RE_TX_PDU,
    LTE_RLC_MAX_RE_TX_IND_PDCP,
    LTE_RLC_MAX_RE_TX_IND_RRC,/*560*/ 

    LTE_RLC_MAX_RE_TX_IND,
    LTE_RLC_TID_INFO_NOT_PRESENT,	
    LTE_RLC_NO_RETRANSMISSION,
    LTE_RLC_GET_QUEUEL_LOAD,
    LTE_RLC_RECEIVED_MAX_SDU,
    LTE_RLC_RECEIVE_AM_SDU,
    LTE_RLC_FETCH_QUEUE_LOAD,
    LTE_RLC_GET_PDU_TYPE,
    LTE_RLC_DISCARD_AM_SDU,
    LTE_RLC_STATUS_PDU_ENCODING,

    LTE_RLC_NEW_AM_PDU_ENCODING,
    LTE_RLC_NEW_AM_PDU_ENCODING_COMPLETE,
    LTE_RLC_NEW_AM_PDU_ENCODING_FAILED,
    LTE_RLC_RE_TX_AM_PDU_ENCODING,
    LTE_RLC_RE_TX_AM_PDU_ENCODING_COMPLETED,
    LTE_RLC_RE_TX_AM_PDU_ENCODING_FAILED,
    LTE_RLC_POLL_TIMER_START,
    LTE_RLC_STATUS_PROHIBIT_TIMER_START,
    LTE_RLC_REMAINING_QUEUE_LOAD,
    LTE_RLC_ENCODING_FAILED,

    LTE_RLC_AM_FIXED_HEADER_DECODING_FAILED,
    LTE_RLC_AM_FIXED_HEADER_DECODING_COMPLETE,
    LTE_RLC_CONTROL_PDU_MEM_ALLOC_FAILED,
    LTE_RLC_ENQUEUE_STATUS_PDU,
    LTE_RLC_AM_PDU_RECEIVED_FROM_MAC,
    LTE_RLC_AM_PDU_DISCARDED,
    LTE_RLC_MAC_OPPORTUNITY,
    LTE_RLC_MSG_JOIN_FAIL,
    LTE_RLC_RECEIVED_DUPLICATE_PKT,
    LTE_RLC_SN_RECEIVED_FIRST_TIME, /* 590 */

    LTE_RLC_POLL_TIMER_RESTART,
    LTE_RLC_AM_PDU_DECODING_FAILED,
    LTE_RLC_POLL_BIT_RECEIVED,		
    LTE_RLC_MSG_EXTRACT_FAIL,
    LTE_RLC_RING_SLOT_NOT_FREE,
    LTE_RLC_PDU_IN_RECEPTION_BUFFER,
    LTE_RLC_RING_SLOT_IN_USE,
    LTE_RLC_UPDATING_VRMS,
    LTE_RLC_UPDATED_VRMS,
    LTE_RLC_UPDATED_STATE_VARS, /* 600 */

    LTE_RLC_SN_LIST_FORMATION,
    LTE_RLC_UPDATED_RCOUNT,
    LTE_RLC_NO_REVERSE_SN_LIST_FOUND,	
    LTE_RLC_BEFORE_REASSM_RLC_STATE_VARS_1,
    LTE_RLC_BEFORE_REASSM_RLC_STATE_VARS_2,
    LTE_RLC_TRIGGERING_STATUS_REPORT,
    LTE_RLC_AM_REORDERING_TIMER_RUNNING,
    LTE_RLC_AM_TIMER_STOP,
    LTE_RLC_AM_TIMER_START,
    LTE_RLC_MULTI_DATA_QUEUE,		
    LTE_RLC_MULTI_BUFF_RECV,
    LTE_RLC_REORDERING_TIMER_EXPIRE,
    LTE_RLC_DELIVER_SDU_TO_PDCP,
    LTE_RLC_DELIVERING_AM_SDU_TO_QUEUE,
    LTE_RLC_SN_PORTION_RESERVED,
    LTE_RLC_SN_PORTION_DISCARDED,
    LTE_RLC_DELIVER_AM_SDU_TO_PDCP,
    LTE_RLC_SDU_START_PORTION_DISCARDED,

    LTE_RLC_SDU_PORTION_DISCARDED,	
    LTE_RLC_RECEIVED_CURRUPTED_AM_PDU,
    LTE_RLC_STATUS_REPORT_DELAY,
    LTE_RLC_TRIGGER_STATUS_PDU,
    LTE_RLC_MEMORY_ALLOC_FAILURE,
    LTE_RLC_STATUS_PROHIBIT_TIMER_EXPIRE,
    LTE_RLC_DECODING_COMPLETE,
    LTE_RLC_NULL_DATA_POINTER_RECEIVED,
    LTE_RLC_PARTIALLY_DECODING_FAILED,
    LTE_RLC_UM_PDU_RECEIVED_FOR_DECODING,

    LTE_RLC_LAST_UM_SDU_RECEIVED,	
    LTE_RLC_CURRUPTED_UM_PDU_RECEIVED,
    LTE_RLC_MEMORY_ALLOCATION_FAILURE,
    LTE_RLC_MEMORY_REMOVAL_FAILURE,
    LTE_RLC_UM_PDU_ENCODING_1,
    LTE_RLC_UM_PDU_ENCODING_2,
    LTE_RLC_MEM_ALLOCATION_FAILURE,
    LTE_RLC_UM_SDU_RECEIVED,
    LTE_RLC_UM_SDU_DISCARDED_PDCP, /* 640 */

    LTE_RLC_UM_PDU_DISCARDED,		
    LTE_RLC_UM_HEADER_DECODING_FAILED,
    LTE_RLC_UM_PDU_DECODING_FAILED,
    LTE_RLC_SN_OUTSIDE_REORDERING_WINDOW,
    LTE_RLC_OUT_OF_ORDER_UM_PDU_RECEIVED,
    LTE_RLC_REORDERING_TIMER_STOP,

    LTE_RLC_REORDERING_TIMER_START,
    LTE_RLC_NULL_RING_POINTER_RECEIVED,
    LTE_RLC_UM_TIMER_EXPIRE,

    LTE_RLC_MOVE_UM_SDU_DIRECTLY,	
    LTE_RLC_UM_SDU_PORTION_RESERVED,
    LTE_RLC_UM_SDU_FULL_PORTION_DISCARDED,
    LTE_RLC_UM_SDU_START_PORTION_DISCARDED,
    LTE_RLC_INVALID_CHANNEL_TYPE,
    LTE_RLC_TM_TX_ENTITY_NOT_PRESENT,
    LTE_RLC_TM_RX_ENTITY_NOT_PRESENT,
    LTE_RLC_SENDING_HARQ_INDICATION,

    LTE_RLC_OAM_SOCKET_CREATION_FAILED,
    LTE_RLC_BUILD_CONFIGURATION,
    LTE_RLC_THREAD_INTERFACE_CLEANUP,
    LTE_RLC_LOGFILE_CREATION,
    LTE_RLC_RECEIVE_MSG_FROM_SOCKET,
    LTE_RLC_RRC_INTERFACE_THREAD_INIT_FAILED,
    LTE_RLC_REESTAB_AM_RX_ENTITY_2,

    LTE_RLC_INVALID_DEST_MODULE_ID,
    LTE_RLC_REESTAB_AM_TX_ENTITY_1,
    LTE_RLC_REESTAB_AM_TX_ENTITY_2,
    LTE_RLC_REESTAB_INVALID_REQUEST,

    LTE_RLC_MEM_ALLOC_FAILED_RRC_DATA_REQ,
    LTE_RLC_RECV_DATA_PKT,
    LTE_RLC_INVALID_UEIDX_LCID,
    LTE_RLC_MEM_ALLOC_FAILED_MAC_UE_DATA_IND,
    LTE_RLC_RRC_MSG_PARSING_FAILED,

    LTE_RLC_MSG_DROPPED,		
    LTE_RLC_INVALID_UE_CONTEXT,
    LTE_RLC_INVALID_UE_INDEX,
    LTE_RLC_CREATE_UE_REQUEST,
    LTE_RLC_DELETE_UE_REQUEST,
    LTE_RLC_RECONFIG_UE_REQUEST,
    LTE_RLC_REESTAB_UE_REQUEST,

    LTE_RLC_COMM_CH_DELETION_FAILED,	
    LTE_RLC_COMM_CH_REESTAB_FAILED,
    LTE_RLC_INVALID_SN_LENGTH,
    LTE_RLC_INVALID_POLL_BYTE,
    LTE_RLC_INVALID_POLL_PDU,
    LTE_RLC_LCID_OUT_OF_RANGE,
    LTE_RLC_LAYER_NOT_INITIALIZED,

    LTE_RLC_MEMORY_ALLOCATION_FAILED,	
    LTE_RLC_INIT_DB,
    LTE_RLC_DE_INIT_DB,
    LTE_RLC_INVALID_UEINDEX_UECONTEXT_MATCH,
    LTE_RLC_ENQUEUE_RX_TIMER_EXPIRY,
    LTE_RLC_ENQUEUE_TX_TIMER_EXPIRY,
    LTE_RLC_DATA_PKT_DROP,
    LTE_RLC_INIT_RX_THREAD_FAILED,
    LTE_RLC_ENTITY_INVALID,
    LTE_RLC_GET_RING_LOAD,		/* 720*/

    LTE_RLC_SDU_RECEIVED_RRC,
    LTE_RLC_PDU_RECEIVED_MAC,
    LTE_RLC_UECONTEXT_NOT_EXIST,
    LTE_RLC_ENTITY_NOT_EXIST,
    LTE_RLC_UM_TX_ENTITY_NOT_EXIST,
    LTE_RLC_UM_SDU_DISCARDED,
    LTE_RLC_AM_TX_ENTITY_NOT_EXIST,
    LTE_RLC_AM_SDU_DISCARDED,
    LTE_RLC_QUEUE_LOAD,
    LTE_RLC_INVALID_UEINDEX_LCID, /* 730 */

    LTE_RLC_RETX_QUEUE_LOAD,
    LTE_RLC_STATUS_PDU_SIZE,
    LTE_RLC_HARQ_FAILURE_IND,
    LTE_RLC_HARQ_FAILURE_IND_2,
    LTE_RLC_WRONG_HARQ_FAILURE_REPORTING,
    LTE_RLC_HARQ_IND,
    LTE_RLC_STATUS_PDU_DROP,
    LTE_RLC_WRONG_LCID_FOR_TX_OPP,
    LTE_RLC_UNABLE_TO_HANDLE_TX_OPP,
    LTE_RLC_STATUS_REPORT_RECEIVED, /* 740 */

    LTE_RLC_TRANSMIT_STATUS_REPORT, 
    LTE_RLC_PKT_DROP_WRONG_RANGE_FROM_OAM,
    LTE_RLC_QLOAD_NEW,
    LTE_RLC_RECV_STATUS_REPORT,
    LTE_RLC_RECV_NACK_SN,
    LTE_RLC_ENCODE_STATUS_PDU, /* new additions from here for release4.*/
    LTE_RLC_ENCODE_RETX_PDU,
    LTE_RLC_ENCODE_NEW_PDU,
    LTE_RLC_TX_OPP,
    LTE_RLC_UM_TX_OPP,    /*750*/

    LTE_RLC_AM_TX_OPP,
     LTE_RLC_INVALID_ENTITY_ERR_1,
     LTE_RLC_INVALID_ENTITY_ERR,
     LTE_RLC_INVALID_ENTITY_ERR_2,
     LTE_RLC_INVALID_ENTITY_ERR_3,
     LTE_RLC_INVALID_UECONTEXT_3,
     LTE_RLC_INVALID_ENTITY_TYPE,
     LTE_RLC_ENTITY_IN_PENDING_DEL_QUEUE_1,
     LTE_RLC_DEL_UE_CONTEXT,
     LTE_RLC_DEL_UE_ENTITY,
     LTE_RLC_DEL_UE_CONTEXT_ERR,
     LTE_RLC_DEL_UE_ENTITY_ERR,
     LTE_RLC_DEL_UE_RX_ENTITY,
     LTE_RLC_DEL_UE_TX_ENTITY,
     LTE_RLC_DEL_UE_COMMON_CH,
     LTE_RLC_REST_UE_ENTITY_ERR,
     LTE_RLC_REST_UE_ENTITY_ERR_1,
     LTE_RLC_REST_UE_ENTITY_ERR_2,
     LTE_RLC_REST_UE_ENTITY_ERR_3,
     LTE_RLC_REST_UE_ENTITY_ERR_4,
     LTE_RLC_HANDLE_DATA_FROM_PDCP_ERR_1,
     LTE_RLC_RECV_SDU_ERR,
     LTE_RLC_HANDLE_DATA_FROM_MAC_ERR_3,
     LTE_RLC_IS_VALID_RX_UM_PDU,
     LTE_RLC_VALIDATE_AND_GET_ENTITY,
     LTE_RLC_HANDLE_DATA_FROM_MAC,
     LTE_RLC_DECODE_UMD_HEADER,
     LTE_RLC_DECODE_UMD_RAW_PDU_ERR_5,
     LTE_RLC_PARSE_UE_ENTITY_INFO_1,




/***********************AM new Logs**************/
     LTE_RLC_TX_OPP_5,
     LTE_RLC_ENCODE_RETX_PDU_INFO,
     LTE_RLC_ENCODE_RETX_PDU_ERR,
     LTE_RLC_ENCODE_RETX_PDU_ERR_1,
     LTE_RLC_ENCODE_RETX_PDU_ERR_2,
     LTE_RLC_ENCODE_RETX_PDU_ERR_3,
     LTE_RLC_ENCODE_RETX_PDU_ERR_4,
     LTE_RLC_ENCODE_RETX_PDU_ERR_5,
     LTE_RLC_GET_DATA_SEG_ERR,
     LTE_RLC_GET_DATA_SEG_ERR_1,
     LTE_RLC_GET_DATA_SEG_ERR_2,
     LTE_RLC_GET_DATA_SEG_ERR_3,
     LTE_RLC_GET_DATA_SEG_ERR_4,
     LTE_RLC_ENCODE_RETX_PDU_ERR_6,
     LTE_RLC_ENCODE_RETX_PDU_ERR_7,
     LTE_RLC_ENCODE_RETX_PDU_ERR_8,
     LTE_RLC_ENCODE_RETX_PDU_ERR_9,
     LTE_RLC_SEND_MAX_THRESHHOLD_ERR,
     LTE_RLC_ENCODE_DATA_PDU_ERR,
     LTE_RLC_ENCODE_DATA_PDU_ERR_1,
     LTE_RLC_ENCODE_DATA_PDU_ERR_2,
     LTE_RLC_ENCODE_DATA_PDU_ERR_3,
     LTE_RLC_ENCODE_DATA_PDU_ERR_4,
     LTE_RLC_ENCODE_DATA_PDU_ERR_5,
     LTE_RLC_ENCODE_DATA_PDU_ERR_6,
     LTE_RLC_ENCODE_DATA_PDU_ERR_7,
     LTE_RLC_ENCODE_DATA_PDU_ERR_8,
     LTE_RLC_DECODE_AMD_HEADER_ERR,
     LTE_RLC_HDL_PDU_ERR,
     LTE_RLC_RECV_STATUS_PDU_ERR,
     LTE_RLC_HDL_PDU_ERR_1,
     LTE_RLC_HDL_PDU_ERR_2,
     LTE_RLC_DECODE_ERR,
     LTE_RLC_DECODE_ERR_1,
     LTE_RLC_CHECK_STATUS_REP_BUFF_ERR,
     LTE_RLC_CHECK_STATUS_REP_BUFF_ERR_1,
     LTE_RLC_CHECK_STATUS_REP_BUFF_ERR_2,
     LTE_RLC_PROCESS_AMD_SEGMENT_ERR_1,
     LTE_RLC_PROCESS_AMD_SEGMENT_ERR_2,
     LTE_RLC_PROCESS_AMD_SEGMENT_ERR_3,
     LTE_RLC_GET_HEADER_INFO_ERR,
     LTE_RLC_PROCESS_AMD_SEGMENT_ERR_4,
     LTE_RLC_DECODE_ENQUE_SEG_ERR,
     LTE_RLC_DECODE_ENQUE_SEG_ERR_1,
     LTE_RLC_PROCESS_AMD_SEGMENT_ERR_5,
     LTE_RLC_HDL_PDU_ERR_3,
     LTE_RLC_RECV_DATA_ERR,
     LTE_RLC_CHECK_RX_SN_ERR,
     LTE_RLC_CHECK_RX_SN_ERR_1,
     LTE_RLC_REASSEMBLE_ERR,
     LTE_RLC_REESTAB_UM_RX_ENTITY_1,
     LTE_RLC_DECODE_SEG_HDR_ERR,
     LTE_RLC_AM_STATUS_PDU,
     LTE_RLC_AM_STATUS_PDU_1,
     LTE_RLC_AM_STATUS_PDU_2,
     LTE_RLC_AM_STATUS_PDU_3,

     LTE_RLC_DECODE_AMD_HEADER_ERR_1,
     LTE_RLC_DECODE_AMD_HEADER_ERR_2,
     LTE_RLC_ACK_OUT_OF_WINDOW_3,
     LTE_RLC_FETCH_RETX_PDU_QLOAD,
     LTE_RLC_FETCH_RETX_PDU_QLOAD_1,
     LTE_RLC_FETCH_RETX_PDU_QLOAD_2,
     LTE_RLC_NACK_RECEIVE_STATUS,
     LTE_RLC_NACK_RECEIVE_STATUS_1,
     LTE_RLC_NACK_RECEIVE_STATUS_2,
     LTE_RLC_SEND_DEL_IND_INFO,
     LTE_RLC_PROCESS_AMD_SEGMENT_ERR_6,
     LTE_RLC_PROCESS_AMD_SEGMENT_ERR_7,
     LTE_RLC_HDL_PDU_ERR_4,
     LTE_RLC_STATUS_REPORT_INFO,
     LTE_RLC_NULL_RETX_PDU_POINTER_1,
     LTE_RLC_CHECK_RX_SN_MS_ERR,
     LTE_RLC_IN_RECP_BUFFER_INFO,
     LTE_RLC_IN_RECP_BUFFER_INFO_1,
     LTE_RLC_IN_RECP_BUFFER_INFO_2,
     LTE_RLC_IN_RECP_BUFFER_INFO_3,
     LTE_RLC_IN_RECP_BUFFER_INFO_4,
     LTE_RLC_IN_RECP_BUFFER_INFO_5,
     LTE_RLC_IN_RECP_BUFFER_INFO_6,
     LTE_RLC_RECV_DATA_INFO,
     LTE_RLC_NACK_RECEIVE_STATUS_3,
     LTE_RLC_NACK_RECEIVE_STATUS_4,
     LTE_RLC_OUT_OF_RANGE_SN_IN_DEL_IND_1,

     LTE_RLC_HANDLE_RLC_DELETE_ENTITY_ERR,
     LTE_RLC_DELETE_ENTITY_ERR_1,
     LTE_RLC_DELETE_ENTITY_ERR_2,
     LTE_RLC_DELETE_ENTITY_ERR_3,
     LTE_RLC_DELETE_ENTITY,
     LTE_RLC_HANDLE_RECONFIG_ERR_1,
     LTE_RLC_HANDLE_RECONFIG_ERR_2,
     LTE_RLC_HANDLE_RECONFIG_ERR_3,
     LTE_RLC_HANDLE_RECONFIG_ERR_4,
     LTE_RLC_HANDLE_RECONFIG_ERR_5,
     LTE_RLC_HANDLE_RECONFIG_ERR_6,
     LTE_RLC_HANDLE_RECONFIG_ERR_7,
     LTE_RLC_HANDLE_RECONFIG_ERR_8,
     LTE_RLC_HANDLE_RECONFIG_ERR_9,
     LTE_RLC_HANDLE_RE_ESTABLISH_ERR_1,
     LTE_RLC_HANDLE_RE_ESTABLISH_ERR_2,
     LTE_RLC_HANDLE_RE_ESTABLISH_ERR_3,
     LTE_RLC_HANDLE_RE_ESTABLISH_ERR_4,

     LTE_RLC_OUT_OF_RANGE_SN_IN_DEL_IND_2,
     LTE_RLC_MULTIPLE_SPS_SETUP_NOT_VALID,

    /* Start 128 UE: 25% NACK Changes */
    LTE_RLC_DUPLICATE_STATUS_IND,
    /* End 128 UE: 25% NACK Changes */
    LTE_RLC_GET_MEM_POOL_FAILED,
    /* SPR 8196 Fix Start */
    RLC_OAM_INIT_IND,
    /* SPR 8196 Fix End */
    LTE_RLC_ENCODE_NEW_PDU2,
    
    RLC_CURR_MAX_LOG_ID = LTE_RLC_ENCODE_NEW_PDU2,
    LOG_RLC_MAX_ID = RLC_CURR_MAX_LOG_ID
}enRlcLogId;

/* SPR 2030 fix Start */
/*Log Id bucket for Packet Relay*/
typedef enum enPacketRelayLogIdT {
     PR_RECVD_RECONFIG_UE_ENTITY_REQ = LOG_RLC_MAX_ID + 1, /*751*/
     PR_OAM_INV_LOG_LEV,
     PR_SEND_CNF_TO_OAM_FAIL,
     PR_S1U_SETUP_SAP_REQ_NO_TUNNEL_INFO,
     PR_UL_DATA_NOT_SENT_TO_GTPU,
     PR_UL_DATA_SENT_TO_GTPU,
     PR_UL_DATA_EMPTY,
     PR_DL_DATA_NOT_SENT_TO_PDCP,
     PR_DL_DATA_SENT_TO_PDCP,
     PR_DL_DATA_EMPTY,

     PR_DL_DATA_MSG_ALLOC_FAIL,
     PR_DL_DATA_MSG_INSERT_FAIL,
     PR_TEID_INDX_ALREADY_IN_USE_SETUP,
     PR_TEID_NOT_IN_USE_FOR_UE_LCID,
     PR_SETUP_SAP_REQ_FAILURE,
     PR_SETUP_SAP_REQ_EMPTY,
     PR_RECVD_S1U_DELETE_UE_ENTITY_REQ,
     PR_TEID_INDX_ALREADY_IN_USE_RELEASE,
     PR_NO_PROCESS_S1U_DELETE_UE_ENTITY_REQ,
     PR_SENT_S1U_DELETE_UE_ENTITY_REQ,

     PR_SEND_CNF_TO_CP_FAIL,
     PR_SENT_ERR_IND_TO_CP,
     PR_SENT_PATH_FAILURE_IND_TO_CP,
     PR_SETUP_SAP_CNF_TEID_FROM_GTPU,
     PR_SETUP_SAP_CNF_NO_UE_CTXT,
     PR_SENT_RELEASE_SAP_CNF_TO_CP,
     PR_DETACH_TRIGGERED,
     PR_MU_ADAPTER_GLUE_SELECT_FAILED,
     PR_ADAPTER_READY_TO_RECEIVE_TEID_UEID_LCID,             
     PR_ADAPTER_UEID_NOT_FOUND_RELEASE,                 /*780*/

     PR_ADAPTER_INV_API_ID,
     PR_ADAPTER_LESS_BYTES_RCVD,
     PR_ADAPTER_INV_UEID_LCID,
     PR_ADAPTER_EMPTY_UL_DATA,
     PR_ADAPTER_UL_DATA_GREATER_SIZE,
     PR_ADAPTER_ALREADY_INITIALIZED,
     PR_ADAPTER_NOT_INITIALIZED,
     PR_ADAPTER_GLUE_SOCKET_SUCCESS,
     PR_ADAPTER_INV_UEID_RECVD,
     PR_ADAPTER_INSERT_TEID_UEID_LCID_IN_DB,             /*790*/ 

     PR_ADAPTER_DELETE_TEID_UEID_LCID_FROM_DB,
     PR_ADAPTER_ERR_IN_SENDING_PACKET_TO_TG,
     PR_ADAPTER_TUNNEL_ID_ALREADY_RCVD,
     PR_WRONG_MOD_ID_RCVD,
     PR_PROCESSING_API_FAIL,
     PR_RCVD_S1U_CREATE_UE_ENTITY_REQ,
     PR_SEND_S1U_CREATE_UE_ENTITY_CNF,
     PR_RCVD_S1U_RECONFIG_UE_ENTITY_REQ,
     PR_RCVD_S1U_RECONFIG_INCORRECT_TAG,            
     PR_SENT_TEID_UEID_LCID_TO_DLTG,               /*800*/

     PR_WRONG_IP_ADDR_LEN_IN_RELAYCONFIG,
     PR_SEND_S1U_RECONFIG_CNF,
     PR_RECVD_S1U_DEL_UE_ENTITY_REQ,
     PR_UEID_NOT_FOUND_FOR_REL,
     PR_SENT_UEID_FOR_REL_TO_DLTG,
     PR_SEND_S1U_DEL_UE_ENTITY_CNF,
     PR_INIT_DONE,
     PR_UNSUPPORTED_API_RCVD,
     PR_UNABLE_TO_OPEN_CONF_FILE,                  
     PR_GTPU_INV_IE_RCVD_FROM_OAM,                 /*810*/

     PR_UNABLE_TO_SEND_ERR_REPORT_TO_OAM,
     PR_GTPU_API_PROCESSING_FAILED,
     PR_SOCKET_OPEN_SUCCESS,                        
     PR_SEND_IND_TO_PDCP_FAIL,                     
     PR_RCVD_EMI_FOR_NONEXIST_RAB,
     PR_SEND_EMI_TO_CP,
     PR_SEND_EMI_TO_PDCP,
     PR_RCVD_END_OF_DATA_FWD_IND,                  
     PR_RCVD_END_OF_DATA_FWD_IND_INV_RAB,           /*820*/ 
     PR_SETUP_SAP_REQ_SAP_INFO,

     PR_SETUP_SAP_REQ_SAP_INFO_INV,
     PR_SETUP_SAP_RECONFIG_TUNNEL_ID_INUSE,
     PR_SAP_REL_TUNNEL_ID_INV,
     PR_GTPU_SAP_REL_FAILURE,                      
     PR_HO_SRC_DATA_FWD_IND,                       /*825 */
     PR_DLTG_TUNNEL_CREATE_IND,
     PR_MSG_POOL_HIGH_WATERMARK,
     PR_MSG_POOL_LOW_WATERMARK,
     PR_MEM_POOL_HIGH_WATERMARK,
     PR_MEM_POOL_LOW_WATERMARK,
     PR_SEC_Q_FULL,
     PR_SENT_TEID_UEID_LCID_TO_SECONDARY_DLTG,   
     PR_SECONDARY_TRANSPORT_ADDR,
     PR_ATTEMPTED_NON_EXIST_RAB,
     PR_SENT_TO_SECONDARY_TG_GET_FAILED,
     PR_SECONDARY_TRANSPORT_ADDR_ALLREADY_EXIST,
     /* SPR 10894 [Intra-Cell HO] start*/
     PR_RCVD_S1U_INTRA_ENB_DATA_FWD_REQ,
     PR_RCVD_S1U_INTRA_ENB_DATA_FWD_REQ_EMPTY,
     PR_RCVD_S1U_LOCAL_PATH_SWITCH_REQ,
     PR_RCVD_S1U_LOCAL_PATH_SWITCH_REQ_EMPTY,
     /* SPR 10894 [Intra-Cell HO] end*/
     /* SPR 16425 fix start */
     PR_ALL_TRANSID_USED,
     /* SPR 16425 fix end */
#ifdef LTE_EMBMS_SUPPORTED
     PR_M1U_SEND_DATA_TO_SYNC_FAIL,
     PR_M1U_SESSION_START_RECV,
     PR_M1U_SESSION_STOP_RECV,
     PR_M1U_SESSION_UPDATE_RECV,
     PR_M1U_CREATE_AREA_RECV,
     PR_M1U_DELETE_AREA_RECV,
     PR_SEND_M1U_SESSION_START_CNF,
     PR_SEND_M1U_SESSION_STOP_CNF,
     PR_SEND_M1U_CREATE_AREA_CNF,
     PR_SEND_M1U_DELETE_AREA_CNF,
     PR_SEND_M1U_SESSION_UPDATE_CNF,
     PR_M1U_PROCESS_MIP_ADD_FAILED,
     PR_M1U_PROCESS_MIP_DEL_FAILED,
     PR_M1U_UPDATE_TEID_FAILED,
     PR_M1U_CREATE_AREA_FAIL,
     PR_M1U_DELETE_AREA_FAIL,
     PR_M1U_PARSING_AREA_INFO_FAIL,
     PR_M1U_SESSION_UPDATE_FAIL,
     PR_M1U_SESSION_STOP_FAIL,
     PR_M1U_SESSION_START_FAIL,
     PR_MAX_LOG_ID = PR_M1U_SESSION_START_FAIL,
#else

     PR_MAX_LOG_ID = PR_ALL_TRANSID_USED,        
#endif
     LOG_PR_MAX_ID = PR_MAX_LOG_ID    
}enPacketRelayLogId;

/*Log Id bucket for GTPu*/
typedef enum enGtpuLogIdT {
     GTPU_NO_MEM_TO_CREATE_POOL =  LOG_PR_MAX_ID + 1, /*851*/
     GTPU_INIT_DONE,
     GTPU_UNKNOWN_API,
     GTPU_INIT_NOT_DONE,
     GTPU_MSG_LESS_BYTES_RCVD,
     GTPU_PAYLOAD_LESS_THAN_HDR_LEN,
     GTPU_VERSION_INCORRECT,
     GTPU_PROTOCOLTYPE_INCORRECT,
     GTPU_INSUFFICIENT_HDR_LEN_WITH_SEQ_NUM, 
     GTPU_UNKNOWN_MSG,                               /*860*/  

     GTPU_TPDU_EXT_HDR_DECODE_FAILURE, 
     GTPU_ECHO_REQ_INV_FORMAT,
     GTPU_ECHO_RESP_EXT_HDR_DECODE_FAILURE,
     GTPU_ECHO_RESP_INV_FORMAT,
     GTPU_EXT_HDR_NOTI_DECODE_FAILURE,
     GTPU_EXT_HDR_NOTI_INV_FORMAT,
     GTPU_ERR_IND_EXT_HDR_DECODE_FAILURE,
     GTPU_ERR_IND_INV_FORMAT,
     GTPU_END_MARKER_EXT_HDR_DECODE_FAILURE,
     GTPU_NO_RX_TUNNEL,                               /*870*/
     GTPU_RRC_S1U_CELL_INDEX_ERR,

     GTPU_NO_TORELAY_NO_FWD_SAP_SET,
     GTPU_GPDU_SENT_TO_RELAY,
     GTPU_ECHO_RESP_SENT_TO_PEER,
     GTPU_ECHO_RESP_RECVD_FROM_PEER,
     GTPU_ECHO_RESP_RECVD_FROM_UNKNOWN_PEER,
     GTPU_ERR_IND_SENT_TO_CP,
     GTPU_ERR_IND_RECVD_FROM_UNKNOWN_PEER,
     GTPU_SENT_ERR_IND_TO_PEER,
     GTPU_DATA_RCVD_FOR_UNKNOWN_RAB,
     GTPU_END_MARKER_RCVD_FOR_UNKNOWN_RAB,           /*880*/      

     GTPU_END_MARKER_SENT_TO_CP,
     GTPU_END_MARKER_SENT_TO_PEER,         
     GTPU_INITDB_REQ_FAIL_DUE_TO_NUM_SRC_IP,
     GTPU_INIT_FAIL_DUE_TO_IP_LEN,
     GTPU_INITDB_CNF_SENT_TO_RELAY,
     GTPU_INV_TIMER_TYPE_IN_SET_TMR_REQ,
     GTPU_ECHO_RESP_TIMER_DURATION_RCVD,
     GTPU_SEND_SET_TIMER_CNF,
     GTPU_INV_TIMER_TYPE_IN_GET_TMR_REQ,
     GTPU_SEND_GET_TIMER_CNF,                        /*890*/

     GTPU_INV_TIMER_TYPE_IN_SET_MAX_RETRY_REQ,
     GTPU_SET_MAX_RETRY_REQ,
     GTPU_SEND_SET_MAX_RETRY_CNF,
     GTPU_INV_TIMER_TYPE_IN_GET_MAX_RETRY_REQ,
     GTPU_SEND_GET_MAX_RETRY_CNF,
     GTP_UL_DATA_FOR_UNKNOWN_RAB,
     GTP_UL_TUNNEL_NO_TX,
     GTP_UL_DATA_SENT_TO_PEER,
     GTP_RELOC_DATA_REQ_FOR_UNKNOWN_RAB,
     GTP_RELOC_DATA_REQ_NO_FWD,                      /*900*/

     GTP_RELOC_DATA_REQ_NO_EXT_HDR_SUPP,
     GTP_RELOC_DATA_REQ_PROCESSED,        
     GTP_INV_IP_TRAFFIC_CLASS_IN_SETUP_SAP_REQ,
     GTP_INV_SRCIP_LEN_IN_SETUP_SAP_REQ,
     GTP_INV_DESTIP_LEN_IN_SETUP_SAP_REQ,
     GTP_SRCIP_DESTIP_LEN_MISMATCH,
     GTP_RAB_CTXT_RELEASED,
     GTP_RELEASE_REQ_FOR_NONEXIST_RAB,
     GTPU_SEND_CNF_TO_CP,
     GTPU_CREATE_SAP_REQ_WITH_FWD_SAP,               /*910*/ 

     GTPU_CREATE_SAP_REQ_RSRC_NOT_AVAILABLE,
     GTPU_SRC_IP_NOT_CONFIGURED,
     GTPU_SRC_IP_NOT_PRESENT,
     GTPU_PEER_NOT_PRESENT,
     GTPU_MOD_SAP_REQ_FOR_NONEXIST_RAB,
     GTPU_MOD_SAP_REQ_INV_SRC_ADD,       
     GTPU_SEND_EMI_TO_PEER_REQ_FOR_UNKNOWN_RAB, 
     GTPU_DL_DATA_DISCARDED_AFTER_EMI,               /*918*/
     /* + coverity 32080, 32078 */
     GTPU_SEND_FAILURE,
     GTPU_ECHO_TIMER_START_FAILURE,
     /* - coverity 32080, 32078 */
    /* SPR 17747 FIX START */ 
    GTPU_ERROR_REPORTER,
    GTPU_MAX_LOG_ID = GTPU_ERROR_REPORTER,
    /* SPR 17747 FIX END */  
    /* SPR 12481 fix start */
    /* Logs added above, hence increased the value */
	LOG_MAC_FORMAT,
    LOG_MAX_ID = 3000
    /* SPR 12481 fix end */
}enGtpuLogId;
/* SPR 2030 fix End */



#define MAX_LOG_STR_VALUES 2
#define MAX_LOG_STR_LEN 41
#define MAX_FAPI_INT_LOG_STR_LEN 1024
#define MAX_LOG_INFO_STR_LEN 36
#define MAX_LOG_INT_VALUES 5
#define MAX_LOG_FLOAT_VALUES 2
#define MAX_LOG_LEVEL_STR_LEN 16
#define MAX_LOG_AREA_STR_LEN 16
#define MAX_LOG_DIS_STR_LEN 128
#define MAX_LOG_DEF_STR_VALUES MAX_LOG_INT_VALUES + \
                               MAX_LOG_FLOAT_VALUES + \
                               MAX_LOG_STR_VALUES

typedef struct LogShmHeader
{
    UInt32 traceSectionSize;
    UInt32 writeOffset;
    UInt32 readOffset;
    UInt32 lostLogCount;
    UInt8  rotatedFlag;
}LogShmHeader;

#define LOG_FILE_HEADER_SIZE sizeof(LogShmHeader)
/***************NEW LOGGING FRAMEWORK CHANGES START********************/
typedef struct LogBinParamsT {
    UInt32  str;
    UInt32  fileName;
    UInt32  funcName;
    UInt32  lineNo;
    UInt8   logModule;
    UInt8   logLevel;
    UInt64  logCategory;
    UInt32  padding[9];
} LogBinParams;

typedef union LogParamsUnT
{
    Char8   strValues[MAX_LOG_STR_VALUES][MAX_LOG_STR_LEN]; 
    LogBinParams logParams;   
}LogParamsUn;

typedef struct LogReaderParamValuesT {
    UInt32  logId;     
    /*UInt32  logLevel;     
    UInt64  logCategory;*/
    UInt32  timestampSec;
    UInt32  timestampUsec;     
    /* SPR 15909 fix start */
    tickType_t  globalTick;
	struct tm tm;
    /* SPR 15909 fix end */
    UInt32  intValues[MAX_LOG_INT_VALUES];     
    /*UDouble32   flValues[MAX_LOG_FLOAT_VALUES];   */
    LogParamsUn  params;
} LogReaderParamValues;
/***************NEW LOGGING FRAMEWORK CHANGES END********************/

typedef struct ttiULLoggingInfoT
{
    UInt32 logid;
    UInt32 tbSize;
    UInt16 systemFrame;
    UInt16 rnti;
    /* +- SPR 18268 */
    UInt16 UEID;
    /* +- SPR 18268 */
    UInt8 pduType;
    UInt8 subframe;
    UInt8 numOfRBs;
    UInt8 RBStart;
    UInt8 rv;
    UInt8 txIndicator;
    UInt8 mcsIndex;
    UInt8 modType;
    UInt8 reserve;
    UInt8 reserve1;
    UInt8 reserve2;
    UInt8 reserve3;
    UInt8 reserve4;
    UInt8 reserve5;
    UInt8 reserve6;
    UInt8 reserve7;
    UInt8 reserve8;
    UInt8 reserve9;
    UInt8 reserve10;
    UInt8 reserve11;
    UInt8 reserve12;
    UInt8 reserve13;
    UInt8 reserve14;
    UInt8 reserve15;
    UInt8 reserve16;
    UInt8 reserve17;
    UInt8 reserve18;
    UInt8 reserve19;
    UInt8 reserve20;
    UInt8 reserve21;
    UInt8 reserve22;
    UInt8 reserve23;
    UInt8 reserve24;
    UInt8 reserve25;
    UInt8 reserve26;
    UInt8 reserve27;
    UInt8 reserve28;
    UInt8 reserve29;
    UInt8 reserve30;
    UInt8 reserve31;
    UInt8 reserve32;
    UInt8 reserve33;
    UInt8 reserve34;
    UInt8 reserve35;
    UInt8 reserve36;
    UInt8 reserve37;
    UInt8 reserve38;
    UInt8 reserve39;
    UInt8 reserve40;
    UInt8 reserve41;
    UInt8 reserve42;
} ttiULLoggingInfo;

typedef struct ttiDciLoggingInfoT
{
    UInt32 logid;
    UInt32 rbCoding;
    UInt32 tbSize1;
    UInt32 tbSize2; 
    UInt32 dlQueueLoad;
    UInt32 ulBSR;
    UInt16 systemFrame;
    UInt16 rnti;
    /* +- SPR 18268 */
    UInt16 ueID;
    UInt8 subframe;
    /* +- SPR 18268 */
    UInt8 numOfRBs;
    UInt8 dciFormat;
    UInt8 numOfLayers;
    UInt8 numOfTB;
    UInt8 harqID;
    UInt8 rv1;
    UInt8 rv2;
    UInt8 ndi1;
    UInt8 ndi2;
    UInt8 ratPolicy;
    UInt8 tpc;
    UInt8 transmissionScheme;
    UInt8 rntiType;
    UInt8 mcsIndex1;
    UInt8 mcsIndex2; 
    UInt8 cceIndex;
    UInt8 aggregationLevel;
    UInt8 searchSpace;
    UInt8 reserve;
    UInt8 reserve1;
    UInt8 reserve2;
    UInt8 reserve3;
    UInt8 reserve4;
    UInt8 reserve5;
    UInt8 reserve6;
    UInt8 reserve7;
    UInt8 reserve8;
    UInt8 reserve9;
    UInt8 reserve10;
    UInt8 reserve11;
    UInt8 reserve12;
    UInt8 reserve13;
    UInt8 reserve14;
    UInt8 reserve15;
} ttiDciLoggingInfo;


/***************NEW LOGGING FRAMEWORK CHANGES START********************/
typedef struct LogParamValuesT {
    UInt32  logId;     
    /*UInt32  logLevel;     
    UInt64  logCategory;     */
    UInt32  timestampSec;
    UInt32  timestampUsec;     
    /* SPR 15909 fix start */
    tickType_t  globalTick;     
    /* SPR 15909 fix end */
	struct tm tm;
    UInt32  intValues[MAX_LOG_INT_VALUES];     
    /*UDouble32   flValues[MAX_LOG_FLOAT_VALUES];   */
    LogParamsUn  params;
} LogParamValues;
/***************NEW LOGGING FRAMEWORK CHANGES END********************/

typedef struct Log_FAPI_Msg_st {
    UInt32  logId;     
    UInt32  timestampSec;
    UInt32  timestampUsec;     
    UInt32  globalTick;
	struct tm tm;
    UInt32  intValue;     
    Char8   strFuncName[MAX_LOG_STR_LEN]; 
    Char8   strMessage[MAX_FAPI_INT_LOG_STR_LEN]; 
} Log_FAPI_st;

typedef struct LogDefValuesT {
    UInt32  logId;
    UInt32  logLevel;
    UInt64  logCategory;
    Char8   log_str[MAX_LOG_DIS_STR_LEN];
    Char8   strValues[MAX_LOG_DEF_STR_VALUES][MAX_LOG_INFO_STR_LEN];
} LogDefValues;


#define MAX_LOGGER_TYPE_STR_LEN 32
#define MAX_LOG_FILES_ALLOWED   100
#define MAX_LOG_FILES_DEFAULT   10
typedef struct lteL2LogOptionT
{
char mac_file_name[NAME_MAX];
char rlc_file_name[NAME_MAX];
/* SPR 5178 changes starts here */

/*SPR21717 changes start*/
char gtpu_file_name[NAME_MAX];
/*SPR21717 changes end*/
SInt32 l2gtpuflag;
#ifdef RLC_STANDALONE_SETUP
char simulator_file_name[NAME_MAX];
#endif
#ifdef LTE_EMBMS_SUPPORTED
char sync_file_name[NAME_MAX];
#endif
char logger_option[MAX_LOGGER_TYPE_STR_LEN];
char logFileSize[MAX_LOGGER_TYPE_STR_LEN];
char numFile[MAX_LOGGER_TYPE_STR_LEN];
SInt32 shmSize;
SInt32 loglevel;
}lteL2LogOption;


typedef struct LogMetaData
{
    struct timeval timestamp;
    /* SPR 15909 fix start */
    tickType_t currentTick;
    /* SPR 15909 fix end */
	struct tm tm;
}LogMetaData;

/* Global variables - used in macro so defines as extern */
extern lteL2LogOption l2Input;
extern UInt32 loglevelEnabled_g;
extern UInt32 macloglevelEnabled_g;
extern UInt32 pdcploglevelEnabled_g;
extern UInt32 rlcloglevelEnabled_g;
extern UInt32 gtpuloglevelEnabled_g;
extern UInt32 syncloglevelEnabled_g;
extern UInt64 logCategoryEnabled_g; 
extern UInt64 maclogCategoryEnabled_g; 
extern UInt64 pdcplogCategoryEnabled_g; 
extern UInt64 rlclogCategoryEnabled_g; 
extern UInt64 gtpulogCategoryEnabled_g; 
extern UInt64 synclogCategoryEnabled_g;
extern LogMetaData logMetaData;
extern LogDefValues logCommValues[LOG_MAX_ID];
extern Char8* logLevelStrValues[];
extern Char8* logModuleStrValues[];

/* MAC_TTI_LOG Start */

#ifdef SHM_PRINT_ENABLED

typedef struct ttiCELLLoggingInfoT
{
    UInt32 logid;
    UInt8 cellID;
    UInt8 reserve;
} ttiCellLoggingInfo;

typedef struct ttiUELoggingInfoT
{
    UInt32 logid;
    /* +- SPR 18268 */
    UInt16 ueID;
    /* +- SPR 18268 */
    UInt8 reserve;
} ttiUELoggingInfo;


/* +- SPR 17777 */
#define LOG_TTI_MSG(logId)  \
         ((macloglevelEnabled_g & logCommValues[logId].logLevel) &&\
          (maclogCategoryEnabled_g & logCommValues[logId].logCategory))?\
	  prepare_tti_logs():NULL;

#endif

#define LOG_FAPI_MSG(logId, size)   NULL;

#ifdef LOG_PRINT_ENABLED
#ifdef SHM_PRINT_ENABLED
#define LOG_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo) do \
    {\
        if((loglevelEnabled_g & logCommValues[logId].logLevel) &&\
          (logCategoryEnabled_g & logCommValues[logId].logCategory))\
        {\
            print_trace(logId,globalTick,\
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,floatValOne,floatValTwo,strValOne,strValTwo); \
        }\
    }while(0)


#define print_msg("log id is %d, log level is %d\n", \
				  "log id is %d, log level is %d\n",
				id, level, int);
#define LOG_MSG(logId, logLev, logCat, globalTick, \
						intValOne, intValTwo, intValThree,intValFour,\
						intValFive,floatValOne,floatValTwo,strValOne,strValTwo) do \
			{\
				if((loglevelEnabled_g & logCommValues[logId].logLevel) &&\
				  (logCategoryEnabled_g & logCommValues[logId].logCategory))\
				{\
					print_trace(logId,globalTick,\
					intValOne, intValTwo, intValThree,intValFour, \
					intValFive,floatValOne,floatValTwo,strValOne,strValTwo); \
				}\
			}while(0)

#define LOG_MAC_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo) do \
    {\
        if((macloglevelEnabled_g & logLev/*logCommValues[logId].logLevel*/) &&\
          (maclogCategoryEnabled_g & logCommValues[logId].logCategory))\
        {\
            print_trace(logId,globalTick,\
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,floatValOne,floatValTwo,strValOne,strValTwo); \
        }\
    }while(0)

#define LOG_FORMAT	print_format

#define LOG_PDCP_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo) do \
    {\
        if((pdcploglevelEnabled_g & logCommValues[logId].logLevel) &&\
          (pdcplogCategoryEnabled_g & logCommValues[logId].logCategory))\
        {\
            print_trace(logId,globalTick,\
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,floatValOne,floatValTwo,strValOne,strValTwo); \
        }\
    }while(0)
#define LOG_RLC_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo) do \
    {\
        if((rlcloglevelEnabled_g & logCommValues[logId].logLevel) &&\
          (rlclogCategoryEnabled_g & logCommValues[logId].logCategory))\
        {\
            print_trace(logId,globalTick,\
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,floatValOne,floatValTwo,strValOne,strValTwo); \
        }\
    }while(0)
#define LOG_GTPU_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo) do \
    {\
        if((gtpuloglevelEnabled_g & logCommValues[logId].logLevel) &&\
          (gtpulogCategoryEnabled_g & logCommValues[logId].logCategory))\
        {\
            print_trace(logId,globalTick,\
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,floatValOne,floatValTwo,strValOne,strValTwo); \
        }\
    }while(0)


#elif CONSOLE_PRINT_ENABLED 
/* +- SPR 17777 */
#define print_msg(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour, \
                intValFive,floatValOne,floatValTwo,strValOne,intValSix) do \
    {\
            console_print(logId, logLevel, logCategory, globalTick, \
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,strValOne,strValTwo); \
     }while(0)
#define LOG_MAC_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour, \
                intValFive,strValOne,strValTwo) do \
    {\
            console_print(logId, logLevel, logCategory, globalTick, \
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,floatValOne,floatValTwo,strValOne,strValTwo); \
     }while(0)
#define LOG_FORMAT(str, ...)	printf(str, ...)

#define LOG_PDCP_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour, \
                intValFive,strValOne,strValTwo) do \
    {\
            console_print(logId, logLevel, logCategory, globalTick, \
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,strValOne,strValTwo); \
     }while(0)
#define LOG_RLC_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour, \
                intValFive,strValOne,strValTwo) do \
    {\
            console_print(logId, logLevel, logCategory, globalTick, \
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,strValOne,strValTwo); \
     }while(0)
#define LOG_GTPU_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour, \
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo) do \
    {\
            console_print(logId, logLevel, logCategory, globalTick, \
            intValOne, intValTwo, intValThree,intValFour, \
            intValFive,strValOne,strValTwo); \
     }while(0)
#endif
/* +- SPR 17777 */
#ifdef LOG_UT_ENABLED
#define LOG_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo)  \
                LOG_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_MAC_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo)  \
                LOG_MAC_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_PDCP_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo)  \
                LOG_PDCP_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_RLC_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo)  \
                LOG_RLC_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_GTPU_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo)  \
                LOG_GTPU_MSG(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)

#else
#define LOG_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo) 
#define LOG_MAC_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_PDCP_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_RLC_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_GTPU_UT(logId, logLev, logCat, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
              intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#ifndef LOG_MSG
#define LOG_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#endif
#ifndef LOG_MAC_MSG
#define LOG_MAC_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#endif
#ifndef LOG_PDCP_MSG
#define LOG_PDCP_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#endif
#ifndef LOG_RLC_MSG
#define LOG_RLC_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#endif
#ifndef LOG_GTPU_MSG
#define LOG_GTPU_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#endif
#endif
#else
#define LOG_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo) 
#define LOG_MAC_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_PDCP_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_RLC_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_GTPU_MSG(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_UT(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_MAC_UT(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_PDCP_UT(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_RLC_UT(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)
#define LOG_GTPU_UT(logId, logLevel, logCategory, globalTick, \
                intValOne, intValTwo, intValThree,intValFour,\
                intValFive,floatValOne,floatValTwo,strValOne,strValTwo)

#define LOG_MSG_TS
#endif

/***************NEW LOGGING FRAMEWORK CHANGES START*****************************/
#ifdef LOG_PRINT_ENABLED

#ifdef SHM_PRINT_ENABLED
#define LOG_PRINT(logLev,logModule,logCat,str,...)\
    print_log((SInt8*)__FILE__,(SInt8*)__func__,__LINE__,logLev,logModule,logCat,(SInt8*)str,##__VA_ARGS__);
#elif CONSOLE_PRINT_ENABLED
#define LOG_PRINT(logLev,logModule,logCat,str,...)\
    console_print_log((SInt8*)__FILE__,(SInt8*)__func__,__LINE__,logLev,logModule,logCat,(SInt8*)str,##__VA_ARGS__);
#else
#define LOG_PRINT(logLev,logModule,logCat,str,...)
#endif

/********************MAC LOGS DEFINATION START******************************/
#ifdef LTE_MAC_LOG_FATAL_ENABLE    
#define LOG_MAC_FATAL(logCat,str,...)\
do\
{\
    if((macloglevelEnabled_g & LOGFATAL) &&\
       (maclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGFATAL,LOGMAC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_MAC_FATAL(logCat,str,...)
#endif

#ifdef LTE_MAC_LOG_ERROR_ENABLE    
#define LOG_MAC_ERROR(logCat,str,...)\
do\
{\
    if((macloglevelEnabled_g & LOGERROR) &&\
       (maclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGERROR,LOGMAC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_MAC_ERROR(logCat,str,...)
#endif

#ifdef LTE_MAC_LOG_WARNING_ENABLE    
#define LOG_MAC_WARNING(logCat,str,...)\
do\
{\
    if((macloglevelEnabled_g & LOGWARNING) &&\
       (maclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGWARNING,LOGMAC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_MAC_WARNING(logCat,str,...)
#endif

#ifdef LTE_MAC_LOG_INFO_ENABLE    
#define LOG_MAC_INFO(logCat,str,...)\
do\
{\
    if((macloglevelEnabled_g & LOGINFO) &&\
       (maclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGINFO,LOGMAC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_MAC_INFO(logCat,str,...)
#endif

#ifdef LTE_MAC_LOG_BRIEF_ENABLE    
#define LOG_MAC_BRIEF(logCat,str,...)\
do\
{\
    if((macloglevelEnabled_g & LOGBRIEF) &&\
       (maclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGBRIEF,LOGMAC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_MAC_BRIEF(logCat,str,...)
#endif

#ifdef LTE_MAC_LOG_DEBUG_ENABLE    
#define LOG_MAC_DEBUG(logCat,str,...)\
do\
{\
    if((macloglevelEnabled_g & LOGDEBUG) &&\
       (maclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGDEBUG,LOGMAC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_MAC_DEBUG(logCat,str,...)
#endif

#ifdef LTE_MAC_LOG_TTI_DEBUG_ENABLE    
#define LOG_MAC_TTI_DEBUG(logCat,str,...)\
do\
{\
    if((macloglevelEnabled_g & LOGTTIDEBUG) &&\
       (maclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGTTIDEBUG,LOGMAC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_MAC_TTI_DEBUG(logCat,str,...)
#endif
/********************MAC LOGS DEFINATION END******************************/

/********************RLC LOGS DEFINATION START******************************/
#ifdef LTE_RLC_LOG_FATAL_ENABLE    
#define LOG_RLC_FATAL(logCat,str,...)\
do\
{\
    if((rlcloglevelEnabled_g & LOGFATAL) &&\
       (rlclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGFATAL,LOGRLC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_RLC_FATAL(logCat,str,...)
#endif

#ifdef LTE_RLC_LOG_ERROR_ENABLE    
#define LOG_RLC_ERROR(logCat,str,...)\
do\
{\
    if((rlcloglevelEnabled_g & LOGERROR) &&\
       (rlclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGERROR,LOGRLC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_RLC_ERROR(logCat,str,...)
#endif

#ifdef LTE_RLC_LOG_WARNING_ENABLE    
#define LOG_RLC_WARNING(logCat,str,...)\
do\
{\
    if((rlcloglevelEnabled_g & LOGWARNING) &&\
       (rlclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGWARNING,LOGRLC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_RLC_WARNING(logCat,str,...)
#endif

#ifdef LTE_RLC_LOG_INFO_ENABLE    
#define LOG_RLC_INFO(logCat,str,...)\
do\
{\
    if((rlcloglevelEnabled_g & LOGINFO) &&\
       (rlclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGINFO,LOGRLC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_RLC_INFO(logCat,str,...)
#endif

#ifdef LTE_RLC_LOG_BRIEF_ENABLE    
#define LOG_RLC_BRIEF(logCat,str,...)\
do\
{\
    if((rlcloglevelEnabled_g & LOGBRIEF) &&\
       (rlclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGBRIEF,LOGRLC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_RLC_BRIEF(logCat,str,...)
#endif

#ifdef LTE_RLC_LOG_DEBUG_ENABLE    
#define LOG_RLC_DEBUG(logCat,str,...)\
do\
{\
    if((rlcloglevelEnabled_g & LOGDEBUG) &&\
       (rlclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGDEBUG,LOGRLC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_RLC_DEBUG(logCat,str,...)
#endif

#ifdef LTE_RLC_LOG_TTI_DEBUG_ENABLE    
#define LOG_RLC_TTI_DEBUG(logCat,str,...)\
do\
{\
    if((rlcloglevelEnabled_g & LOGTTIDEBUG) &&\
       (rlclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGTTIDEBUG,LOGRLC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_RLC_TTI_DEBUG(logCat,str,...)
#endif
/********************RLC LOGS DEFINATION END******************************/

/********************PDCP LOGS DEFINATION START******************************/
#ifdef LTE_PDCP_LOG_FATAL_ENABLE    
#define LOG_PDCP_FATAL(logCat,str,...)\
do\
{\
    if((pdcploglevelEnabled_g & LOGFATAL) &&\
       (pdcplogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGFATAL,LOGPDCP,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_PDCP_FATAL(logCat,str,...)
#endif

#ifdef LTE_PDCP_LOG_ERROR_ENABLE    
#define LOG_PDCP_ERROR(logCat,str,...)\
do\
{\
    if((pdcploglevelEnabled_g & LOGERROR) &&\
       (pdcplogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGERROR,LOGPDCP,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_PDCP_ERROR(logCat,str,...)
#endif

#ifdef LTE_PDCP_LOG_WARNING_ENABLE    
#define LOG_PDCP_WARNING(logCat,str,...)\
do\
{\
    if((pdcploglevelEnabled_g & LOGWARNING) &&\
       (pdcplogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGWARNING,LOGPDCP,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_PDCP_WARNING(logCat,str,...)
#endif

#ifdef LTE_PDCP_LOG_INFO_ENABLE    
#define LOG_PDCP_INFO(logCat,str,...)\
do\
{\
    if((pdcploglevelEnabled_g & LOGINFO) &&\
       (pdcplogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGINFO,LOGPDCP,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_PDCP_INFO(logCat,str,...)
#endif

#ifdef LTE_PDCP_LOG_BRIEF_ENABLE    
#define LOG_PDCP_BRIEF(logCat,str,...)\
do\
{\
    if((pdcploglevelEnabled_g & LOGBRIEF) &&\
       (pdcplogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGBRIEF,LOGPDCP,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_PDCP_BRIEF(logCat,str,...)
#endif

#ifdef LTE_PDCP_LOG_DEBUG_ENABLE    
#define LOG_PDCP_DEBUG(logCat,str,...)\
do\
{\
    if((pdcploglevelEnabled_g & LOGDEBUG) &&\
       (pdcplogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGDEBUG,LOGPDCP,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_PDCP_DEBUG(logCat,str,...)
#endif

#ifdef LTE_PDCP_LOG_TTI_DEBUG_ENABLE    
#define LOG_PDCP_TTI_DEBUG(logCat,str,...)\
do\
{\
    if((pdcploglevelEnabled_g & LOGTTIDEBUG) &&\
       (pdcplogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGTTIDEBUG,LOGPDCP,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_PDCP_TTI_DEBUG(logCat,str,...)
#endif
/********************PDCP LOGS DEFINATION END******************************/

/********************GTPUPR LOGS DEFINATION START******************************/
#ifdef LTE_GTPUPR_LOG_FATAL_ENABLE    
#define LOG_GTPUPR_FATAL(logCat,str,...)\
do\
{\
    if((gtpuloglevelEnabled_g & LOGFATAL) &&\
       (gtpulogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGFATAL,LOGGTPUPR,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_GTPUPR_FATAL(logCat,str,...)
#endif

#ifdef LTE_GTPUPR_LOG_ERROR_ENABLE    
#define LOG_GTPUPR_ERROR(logCat,str,...)\
do\
{\
    if((gtpuloglevelEnabled_g & LOGERROR) &&\
       (gtpulogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGERROR,LOGGTPUPR,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_GTPUPR_ERROR(logCat,str,...)
#endif

#ifdef LTE_GTPUPR_LOG_WARNING_ENABLE    
#define LOG_GTPUPR_WARNING(logCat,str,...)\
do\
{\
    if((gtpuloglevelEnabled_g & LOGWARNING) &&\
       (gtpulogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGWARNING,LOGGTPUPR,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_GTPUPR_WARNING(logCat,str,...)
#endif

#ifdef LTE_GTPUPR_LOG_INFO_ENABLE    
#define LOG_GTPUPR_INFO(logCat,str,...)\
do\
{\
    if((gtpuloglevelEnabled_g & LOGINFO) &&\
       (gtpulogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGINFO,LOGGTPUPR,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_GTPUPR_INFO(logCat,str,...)
#endif

#ifdef LTE_GTPUPR_LOG_BRIEF_ENABLE    
#define LOG_GTPUPR_BRIEF(logCat,str,...)\
do\
{\
    if((gtpuloglevelEnabled_g & LOGBRIEF) &&\
       (gtpulogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGBRIEF,LOGGTPUPR,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_GTPUPR_BRIEF(logCat,str,...)
#endif

#ifdef LTE_GTPUPR_LOG_DEBUG_ENABLE    
#define LOG_GTPUPR_DEBUG(logCat,str,...)\
do\
{\
    if((gtpuloglevelEnabled_g & LOGDEBUG) &&\
       (gtpulogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGDEBUG,LOGGTPUPR,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_GTPUPR_DEBUG(logCat,str,...)
#endif

#ifdef LTE_GTPUPR_LOG_TTI_DEBUG_ENABLE    
#define LOG_GTPUPR_TTI_DEBUG(logCat,str,...)\
do\
{\
    if((gtpuloglevelEnabled_g & LOGTTIDEBUG) &&\
       (gtpulogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGTTIDEBUG,LOGGTPUPR,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_GTPUPR_TTI_DEBUG(logCat,str,...)
#endif
/********************GTPUPR LOGS DEFINATION END******************************/
/********************SYNC LOGS DEFINATION START******************************/
#ifdef LTE_SYNC_LOG_FATAL_ENABLE    
#define LOG_SYNC_FATAL(logCat,str,...)\
do\
{\
    if((syncloglevelEnabled_g & LOGFATAL) &&\
       (synclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGFATAL,LOGSYNC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_SYNC_FATAL(logCat,str,...)
#endif

#ifdef LTE_SYNC_LOG_ERROR_ENABLE    
#define LOG_SYNC_ERROR(logCat,str,...)\
do\
{\
    if((syncloglevelEnabled_g & LOGERROR) &&\
       (synclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGERROR,LOGSYNC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_SYNC_ERROR(logCat,str,...)
#endif

#ifdef LTE_SYNC_LOG_WARNING_ENABLE    
#define LOG_SYNC_WARNING(logCat,str,...)\
do\
{\
    if((syncloglevelEnabled_g & LOGWARNING) &&\
       (synclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGWARNING,LOGSYNC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_SYNC_WARNING(logCat,str,...)
#endif

#ifdef LTE_SYNC_LOG_INFO_ENABLE    
#define LOG_SYNC_INFO(logCat,str,...)\
do\
{\
    if((syncloglevelEnabled_g & LOGINFO) &&\
       (synclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGINFO,LOGSYNC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_SYNC_INFO(logCat,str,...)
#endif

#ifdef LTE_SYNC_LOG_BRIEF_ENABLE    
#define LOG_SYNC_BRIEF(logCat,str,...)\
do\
{\
    if((syncloglevelEnabled_g & LOGBRIEF) &&\
       (synclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGBRIEF,LOGSYNC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_SYNC_BRIEF(logCat,str,...)
#endif

#ifdef LTE_SYNC_LOG_DEBUG_ENABLE    
#define LOG_SYNC_DEBUG(logCat,str,...)\
do\
{\
    if((syncloglevelEnabled_g & LOGDEBUG) &&\
       (synclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGDEBUG,LOGSYNC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_SYNC_DEBUG(logCat,str,...)
#endif

#ifdef LTE_SYNC_LOG_TTI_DEBUG_ENABLE    
#define LOG_SYNC_TTI_DEBUG(logCat,str,...)\
do\
{\
    if((syncloglevelEnabled_g & LOGTTIDEBUG) &&\
       (synclogCategoryEnabled_g & logCat))\
    {\
        LOG_PRINT(LOGTTIDEBUG,LOGSYNC,logCat,str,##__VA_ARGS__)\
    }\
}while(0)    
#else
#define LOG_SYNC_TTI_DEBUG(logCat,str,...)
#endif
/********************SYNC LOGS DEFINATION END******************************/

/********************LWA RELAY LOGS DEFINATION START******************************/
/********************LWA RELAY LOGS DEFINATION END***********************/
#else

#define LOG_PRINT(logLev,logModule,logCat,str,...)

/***************MAC LOGS*************************/
#define LOG_MAC_FATAL(logCat,str,...)
#define LOG_MAC_ERROR(logCat,str,...)
#define LOG_MAC_WARNING(logCat,str,...)
#define LOG_MAC_INFO(logCat,str,...)
#define LOG_MAC_BRIEF(logCat,str,...)
#define LOG_MAC_DEBUG(logCat,str,...)
#define LOG_MAC_TTI_DEBUG(logCat,str,...)

/***************RLC LOGS*************************/
#define LOG_RLC_FATAL(logCat,str,...)
#define LOG_RLC_ERROR(logCat,str,...)
#define LOG_RLC_WARNING(logCat,str,...)
#define LOG_RLC_INFO(logCat,str,...)
#define LOG_RLC_BRIEF(logCat,str,...)
#define LOG_RLC_DEBUG(logCat,str,...)
#define LOG_RLC_TTI_DEBUG(logCat,str,...)

/***************PDCP LOGS*************************/
#define LOG_PDCP_FATAL(logCat,str,...)
#define LOG_PDCP_ERROR(logCat,str,...)
#define LOG_PDCP_WARNING(logCat,str,...)
#define LOG_PDCP_INFO(logCat,str,...)
#define LOG_PDCP_BRIEF(logCat,str,...)
#define LOG_PDCP_DEBUG(logCat,str,...)
#define LOG_PDCP_TTI_DEBUG(logCat,str,...)

/***************GTPU PR LOGS*************************/
#define LOG_GTPUPR_FATAL(logCat,str,...)
#define LOG_GTPUPR_ERROR(logCat,str,...)
#define LOG_GTPUPR_WARNING(logCat,str,...)
#define LOG_GTPUPR_INFO(logCat,str,...)
#define LOG_GTPUPR_BRIEF(logCat,str,...)
#define LOG_GTPUPR_DEBUG(logCat,str,...)
#define LOG_GTPUPR_TTI_DEBUG(logCat,str,...)


/***************SYNC  LOGS*************************/
#define LOG_SYNC_FATAL(logCat,str,...)
#define LOG_SYNC_ERROR(logCat,str,...)
#define LOG_SYNC_WARNING(logCat,str,...)
#define LOG_SYNC_INFO(logCat,str,...)
#define LOG_SYNC_BRIEF(logCat,str,...)
#define LOG_SYNC_DEBUG(logCat,str,...)
#define LOG_SYNC_TTI_DEBUG(logCat,str,...)

/***************LWA RELAY LOGS*********************/
#endif

/***************NEW LOGGING FRAMEWORK CHANGES END*****************************/



/****************************************************************************
 * Exported Types
 ****************************************************************************/
typedef enum  
{
    LOGGER_FAILURE,
    LOGGER_SUCCESS
}logger_et;

/*
 * log area and stack ids will be provided by application 
 * Indepedent of logging framework
 */


enum
{
    INVALID_LOG = LTE_L2_LOG_INVALID,/*0x000000*/
    LOGFATAL = LTE_L2_LOG_CRITICAL, /*0x0000001*/
    LOGERROR = LTE_L2_LOG_ERROR, /*0x0000002*/
    LOGWARNING = LTE_L2_LOG_WARNING, /*0x0000004*/
    LOGINFO = LTE_L2_LOG_INFO, /*0x0000008*/
    LOGBRIEF = LTE_L2_LOG_BRIEF, /*0x0000010*/
    LOGDEBUG = LTE_L2_LOG_DETAILED, /*0x0000020*/
    LOGTTIDEBUG = LTE_L2_LOG_DETAILEDALL /*0x0000040*/
};

/***************NEW LOGGING FRAMEWORK CHANGES START*****************************/
enum
{
     LOGMAC=0x1,
     LOGPDCP=0x2,
     LOGRLC=0x4,
     LOGGTPUPR=0x8,
     LOGSYNC=0x10
};
/***************NEW LOGGING FRAMEWORK CHANGES END*****************************/

#define ALL_LOG_LEVEL_SET ((2 * LOGTTIDEBUG) - 1)
/*
 * Structure Used to store thread specific log info 
 */
typedef struct 
{
    void *p_shmptr;
    UInt32 file_size;
}log_info_t;


/****************************************************************************
 * Exported Constants
 ****************************************************************************/

/****************************************************************************
 * Exported Variables
 ****************************************************************************/
/****************************************************************************
 * Exported Functions
 ****************************************************************************/
/* SPR 1998 changes start */
/****************************************************************************
 * Function Name  : logBacktrace
 * Inputs         : None
 * Outputs        : log current backtrace
 * Returns        : Success 
 * Variables      :
 * Description    : This API logs the current stack backtrace.
 ****************************************************************************/
#define logBacktrace do {\
    UInt32 j,k,nptrs; /*GCC_4.9_FIX*/\
    void *buffer[100]; \
    /* SPR 10140 fix start*/ \
    UInt32 logargs[5]; \
    /* SPR 10140 fix end*/ \
    /* get the backtrace for received signal */ \
    nptrs = backtrace(buffer, 100); \
    printf("Received signal %d\n", signum); \
    LOG_MAC_MSG(L2_CRASH_ID, LOGFATAL, L2_SYS_FAIL, 0, signum, 0, 0, 0, 0, \
            0.0, 0.0, __FILE__, __func__); \
    for (j = 0; j < nptrs; j+=5) \
    { \
        printf("0x%x\n", *(UInt32 *)buffer[j]); \
        /* SPR 10140 fix start*/ \
        logargs[0]=logargs[1]=logargs[2]=logargs[3]=logargs[4]=0; \
        for(k=j; k<(j+5) && k<nptrs; k++) \
        { \
             logargs[k-j] = *(UInt32 *)buffer[k]; \
        } \
        LOG_MAC_MSG(L2_BACKTRACE_ID, LOGFATAL, L2_SYS_FAIL, 0, \
                logargs[0], logargs[1],\
                logargs[2], logargs[3],\
                logargs[4], 0.0, 0.0, __FILE__, __func__); \
        /* SPR 10140 fix end*/ \
    } \
} while (0)
/* SPR 1998 changes end */

/*
 * Used to initialize logger, By default all log area will be disabled,
 * thread_id(0,1,2...MAX_THREADS) should be unique to log file name
 */


logger_et logger_init(UInt32 thread_id, Char8 *p_log_file_name,UInt32 shmSize);

void enable_log_level(UInt32 logLevel);
void disable_log_level(UInt32 logLevel);
void enable_log_category(UInt64 logCategory);
void disable_log_category(UInt64 logCategory);
UInt32 get_log_level(void);
UInt64 get_log_category(void);

/*
 * This function will register stack and log area. 
 */

/*
 * This function will deregister a log area of stack. 
 */

/*
 * This function is used to dump log in shared memory segment.
 */

void verifyLogArray(void);

/* MAC_TTI_LOG Start */

#ifdef SHM_PRINT_ENABLED
/* +- SPR 17777 */
void * prepare_tti_logs(void); 
/* +- SPR 17777 */
#endif

/* MAC_TTI_LOG End */

void print_trace(UInt32 logId,UInt64 globalTick,\
        UInt32 intValOne,UInt32 intValTwo,\
        UInt32 intValThree,UInt32 intValFour,UInt32 intValFive,\
        UDouble32 floatValOne,UDouble32 floatValTwo ,\
        const Char8 *strValOne,const Char8 *strValTwo);
/* +- SPR 17777 */
/*+ SSI fix*/
void print_log(SInt8* fileName,SInt8* funcName,UInt32 lineNo,\
		UInt8 logLevel,UInt8 logModule,UInt64 logCategory,SInt8* str,...);
/*- SSI FIX*/
void console_print(UInt32 logId, UInt32 logLevel,UInt64 logCategory,\
tickType_t globalTick,UInt32 intValOne,UInt32 intValTwo,UInt32 intValThree,\
UInt32 intValFour,UInt32 intValFive,\
const Char8 *strValOne,const Char8 *strValTwo);

void file_print(UInt32 logId, UInt32 logLevel,UInt64 logCategory,\
tickType_t globalTick,UInt32 intValOne,UInt32 intValTwo,UInt32 intValThree,\
UInt32 intValFour,UInt32 intValFive,\
const Char8 *strValOne,const Char8 *strValTwo);
/* +- SPR 17777 */
/* SPR 15909 fix end */

void interpret_log(LogParamValues *pParamValues, FILE *fptr);

void initlogFramework(void);
void startLogReader(lteL2LogOption *l2Input_p);
/* CA Logging Changes Start */
void startExecSchedLogReader(lteL2LogOption *l2Input_p,
        Char8*             p_log_file_name);
/* CA Logging Changes End */
/* +SPR_10381 Changes */
void startEncoderLogReader(lteL2LogOption *l2Input_p,
        Char8*             p_log_file_name);
/* -SPR_10381 Changes */
void startPdcpLogReader(
        lteL2LogOption     *l2Input_p, 
        Char8*             p_log_file_name);
#endif
